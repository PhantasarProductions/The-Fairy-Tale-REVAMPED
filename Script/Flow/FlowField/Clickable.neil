// License Information:
// src/Tricky Script/Script/Flow/FlowField/Clickable.neil
// Version: 21.12.18
// Copyright (C) 2021 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#use "libs/linkedlist"

Module Class
	Static Table Register 

	Static Bool All(Int X,Int Y)
		If !Register[FieldFlow.Map.Layer]
			Return False
		End
		for CLK in Register[FieldFlow.Map.Layer].Each
			if Clk.Clicked(x, y)
				//Map.WalkTo(CLK.walkx,CLK.Walky)
				FieldFlow.Map.CurLayer.Obj("PLAYER").WalkTo(CLK.walkx,CLK.Walky)
				FieldFlow.Map.ArriveFunc=CLK.ArriveEvent 
				FieldFlow.Map.ArriveParam=Clk.ArriveParam
				FieldFlow.Map.GoToX=Clk.WalkX
				FieldFlow.Map.GoToY=Clk.WalkY
				CSayF("Clicked clickable %s; To(%d,%d); Event: %s; Param: %s",Clk.Tag,Clk.WalkX,Clk.WalkY,Lua.tostring(CLK.ArriveEvent),Clk.ArriveParam)
				return true
			end
		end
		return false
	End
	
	Static Void Clear()
		Table Kill={}
		For K,_ in pairs(Register)
			Kill+=K
		End
		For K in Each(Kill)
			Register[K]=nil
		End
		print(Lua.debug.traceback()) 
		CSay("Clickable list cleared")		
	End
	
	Static Void Create(String _lay,String _tag,Int _wx,int _wy,_ae,String _ap="")
		Register = Register || {}
		Register[_Lay] = Register[_Lay] || new LinkedList() 
		Register[_Lay].AddLast(Self(_tag,_wx,_wy,_ae,_ap))		
	End
	
	Static Table Spot(Lay,String ObjTag,Same)
		Table Ret = {}
		Var O = Lay.Obj(ObjTag)
		Ret.X = O.X
		Ret.Y = O.Y
		If !Same
			Ret.Y += 32
		End	
		Return Ret
	End
	
	Static Void CBLoadMap()
		CSay("Generate register of clickables")
		Clear()
		FlowField.Map.KthuraMap.ReMap()
		For L in each(FlowField.Map.KthuraMap.Layers)
			Var Lay = FlowField.Map.KthuraMap.Layer(L)
			//Table rItems = Map.LRItems
			For T in each(LAY.TagListArray)
				//Var O = Lay.Obj(T)
				If prefixed(T,"NPC_MT_")
					Var fuck = Spot(Lay,T)
					Create(L,T,fuck.X,fuck.Y,MapText,T)
					CSayF("= NPC_MT: %s",T)
				Elseif T=="NPC_BlueSeal"
					Var fuck = Spot(Lay,T)
					Create(L,T,fuck.X,fuck.Y,FieldFlow.BlueSeal.Open)
				ElseIf prefixed(T,"NPC_")
					Var fuck = Spot(Lay,T)
					Create(L,T,fuck.X,fuck.Y,Map.Script,T) //,sprintf("\"%s\"",T))
					CSayF("= NPC: %s",T)
				ElseIf Prefixed(T,"PSG_")
					Var fuck = Spot(Lay,T)
					Create(L,T,fuck.X,fuck.Y,FieldFlow.GoToSave,T) //,sprintf("\"%s\"",T))
					CSayF("= Savespot: %s",T)
				ElseIf Prefixed(T,"PRC_")
					Var fuck = Spot(Lay,T)
					Create(L,T,fuck.X,fuck.Y,FieldFlow.Recovery,T) //,sprintf("\"%s\"",T))
					CSayF("= Recovery Spot: %s",T)
				ElseIf Prefixed(T,"RNDITEM_")
					If Math.Random(1,__skill^2)==1 
						Var S = Spot(Lay,T)
						Create(L,T,S.X,S.Y,FieldFlow.Treasure.RandomItem,T)
						CSayF("= Random Item: %s",T)
					Else
						Lay.Kill(T)
						CSayF("= Removed random item: %s",T)
					End
				ElseIf Prefixed(T,"PTE_")
					Var fuck = Spot(Lay,T)
					Create(L,T,fuck.X,fuck.Y,FlowField.TravelEmblem,T)
				ElseIf Prefixed(T,"BLACKORB_")
					Var fuck = Spot(Lay,T)
					Create(L,T,fuck.X,fuck.Y,FlowField.BlackOrb,T)
				ElseIf Prefixed(T,"CHEST_")
					CSayF("= Chest: %s",T)
					if Lay.Obj(T).Data["NEWGAME+"]:upper()=="ONLY" && (!__newgameplus)
						Lay.Kill(T)
						CSayF("= Removed New Game+ Only chest: %s",T)
					Else
						Var S = Spot(Lay,T)					
						Create(L,T,S.X,S.Y,FieldFlow.Treasure.Chest,T)
					End
				End
			End
		End
	End
	
	ReadOnly String Tag
	ReadOnly Int WalkX
	ReadOnly Int WalkY
	ReadOnly Var ArriveEvent
	ReadOnly String ArriveParam
	
	
	Const Bool Debug = True 
	ReadOnly Bool Clicked(Int X, Int Y)
		If Debug
			CSayF("Checking clickable object %s(%04d,%04d)",Tag,X,Y)
		End
		If !FieldFlow.Map.CurLayer.HasTag(Tag)
			If Debug
				CSayF("= No such object here, so I'll pass")
			End
			Return False
		End
		Return FieldFlow.Map.CurLayer.Obj(Tag).PixInObj(x,y)
	End
	
	Constructor(String _tag,Int _wx,int _wy,_ae,String _ap="")
		Tag         = _Tag
		WalkX       = _wx
		WalkY       = _wy
		ArriveEvent = _ae
		ArriveParam = _ap		
	End
	
	
	
	
End