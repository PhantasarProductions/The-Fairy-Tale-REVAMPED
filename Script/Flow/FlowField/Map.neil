// License Information:
// src/Tricky Script/Script/Flow/FlowField/Map.neil
// Version: 21.08.23
// Copyright (C) 2021 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#use "Libs/XMath"

Module
	Var KthuraMap
	String Layer
	Bool MSDraw 
	Bool MSUpdate
	Int ScrollX
	Int ScrollY
	Int GoToX
	Int GoToY
	Bool AllowAutoScroll = True
	Var ArriveFunc = Nil
	String ArriveParam 

	Get String LoadedMap
		Return gv.gstr.LoadedMap
	End
	Set String LoadedMap
		gv.gstr.LoadedMap=value
	End
	
	
	Get Var CurLayer
		Return KthuraMap.Layer(Layer)
	End
	
	Get Var CurrentLayer
		Return CurLayer
	End
	
	Get Var Clickable
		Return FlowField.Clickable
	End
	
	Get Var Player
		Return CurrentLayer.Obj("PLAYER")
	End
	
	Void ScrollTo(Int X,Int Y, Int Speed=1)
		AllowAutoScroll = False
		Int SX = 0 
		Int SY = 0
		Int NX = ScrollX
		Int NY = ScrollY
		Int XX = ScrollX
		Int XY = ScrollY
		If X<ScrollX
			SX = math.max(1,Speed)
			NX = X
		elseif X>ScrollX
			SX = -math.max(1,Speed)
			XX = X
		End
		If Y<ScrollY
			NY = Y
			SY = math.max(1,Speed)
		elseif Y>ScrollY
			XY = Y
			SY = -math.max(1,Speed)
		End
		Repeat
			ScrollX += SX
			ScrollY += SY
			ScrollX = math.min(NX,ScrollX)
			ScrollX = math.max(XX,ScrollX)
			ScrollY = math.min(NY,ScrollY)
			ScrollY = math.max(XY,ScrollY)
			Graphics.Cls()
			FlowField.DrawScreen()
			Graphics.Flip()
			Events.Poll()
			FPS.WaitMinTicks()
		Until ScrollX==X && ScrollY==Y
	End
	
	Void SetLayer(String L)
		Layer = L
	End
	
	Void WalkClick(Int mX, Int mY)		
		int x = mx + ScrollX
		int y = my + ScrollY
		CSayF("Request to walk to (%4d,%4d); Mouse(%4d,%4d); Scroll(%4d,%4d)",x,y,mx,my,ScrollX,ScrollY)
		if !CurLayer.HasTag("PLAYER")
			CSay("But there is no player available now, so the request will be ignored!")
			return
		end				
		if !Clickable.All(x,y)
			CurLayer.Obj("PLAYER").WalkTo(x,y)
			ArriveFunc = nil
			ArriveParam = ""
		End	
	End
	
	Void CBLoadMap(string mapbundle)
		AllowAutoScroll = true
		LoadedMap = MapBundle:upper()
		CSayF("= Loading Kthura Map: %s",MapBundle)
		KthuraMap = Kthura.Load("Kthura/"..MapBundle)
		gv.gStr.MapTitle = KthuraMap.Meta.Title
	End
		
	Void SG()
		SaveGame.Data["PermaKills.NEIL"] = FieldFlow.Kill.Serialize
		string r = "// Mapstuff\nInit\n"		
		r += "\tFlowField.Map.ScrollX = "..tostring(FlowField.Map.ScrollX).."\n"
		r += "\tFlowField.Map.ScrollY = "..tostring(FlowField.Map.ScrollY).."\n"
		r += "\tFlowField.Map.AllowAutoScroll = "..tostring(FlowField.Map.AllowAutoScroll).."\n"
		r += "\tFlowField.Map.Layer = \""..FlowField.Map.Layer.."\"\n"
		r += "\tFlowField.Map.CurLayer.Spawn(\"PLAYER\",0,0)\n"
		r += "\tFlowField.Map.Player.X = "..tostring(FlowField.Map.Player.X).."\n"
		r += "\tFlowField.Map.Player.Y = "..tostring(FlowField.Map.Player.Y).."\n"
		r += "\tFlowField.Map.Player.Wind = \""..FlowField.Map.Player.Wind.."\"\n"
		r += "end\n"
		SaveGameData["Map.neil"] = r
	End
	
	Void LG()
		FlowField.LoadMap(LoadedMap)
		Loading()
		NeilDoString(SaveGame.Data["MAP.NEIL"],"SG:Map.Neil")
	End
	
	Void ObjSet(string Tag,string Key,value)
		CurrentLayer.Obj(Tag)[Key] = value
	End
	
	Bool Walking()
		If !KthuraMap
			CSay("WARNING! KthuraMap is nil!")
			Return False
		End
		If !CurLayer.HasTag("PLAYER")
			CSayF("No player!")
			Return False
		End		
		Bool ret = CurLayer.Obj("PLAYER").Walking
		//CSayF("Walking Check:!%s/%s => %s",Lua.tostring(ret),lua.tostring(ArriveFunc),lua.tostring((!ret) && ArriveFunc))
		if (!ret) && ArriveFunc
			number Afstand = xMath.Pythagoras(Player.X,Player.Y, GoToX, GoToY)
			CSayF("Distance is %04.3f",Afstand)
			If Afstand < 60
				Switch Lua.type(ArriveFUNC)
					Case "function"
						ArriveFUNC(ArriveParam)
					Case "string"
						Map.Script(ArriveFunc,ArriveParam)						
					Default
						Lua.error("Walk arrive error!")
				End
				ArriveFunc = nil
			End
		end
		return ret
	end
		
	
End