// License Information:
// src/Tricky Script/Script/Flow/FlowCombat/Class_Hero.neil
// Version: 21.12.14
// Copyright (C) 2021 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information


#use "Script/Use/Misc/Box"

Class Hero Extends Fighter

	Int Num
	Int AttackFrame = 0
	Const Int AttackFrames = 100
	Const Var Images = {}
	
	Get Bool DrawThis
		return RPGParty[num] == self.Tag
	End
	
	Get Int H
		Return 128
	End
	Get Int W
		Return 64
	End


	Static Void Compile(String _Tag)
		Var WHero = new Hero()
		CSayF("Compiling hero %s",_Tag)
		WHero.Setup(_Tag,"Hero")		
		WHero.Num = Party.MemNum(_Tag)
		WHero.Y = (((_ASH - 600) div (Party.Count+1)) * WHero.Num) + 500
		WHero.X = (_ASW div 2) + ( ((_ASW div 2) div (Party.Count+1)) * WHero.Num)
		//WHero.Char = RPGChar[_Tag]
	End
	
	Void Draw()
		Static String Format = "GFX/Combat/Fighters/Hero/%s.%s.png"
		String DTag = Self.Stage
		if Self.HP==0
			Self.Stage="DEAD"
		End
		Switch Self.Stage:upper()
			Case "ATTACK"
				DTag = SprintF("Attack.%d",math.max(1,math.min(2,AttackFrame div 30)))				
			Case "DEAD"
				If Self.HP>0
					Self.Stage="IDLE"
				End
			Default
		End
		Image.AltScale("COMBAT",2,2)
		String ITag = self.Tag.."."..DTag
		Images[ITag] = Images[ITag] || Image.LoadNew(SprintF(Format,Self.Tag,DTag),ITag)
		Images[ITag].HotBottomCenter()
		Images[ITag].ASDraw("COMBAT",Self.X,Self.Y)
		Image.AltScale("COMBAT",1,1)
	End
	
	Bool Pose(Act)	 	
	 	AttackFrame = (AttackFrame + 1) % AttackFrames 
	 	Self.Stage = Act.Act.Stance
	 	Return AttackFrame == 0
	 End

	
End




Class Stage_PlayerSelectTarget Extends Stage
	Static Var Act
	Static Int OldMouseX
	Static Int OldMouseY
	Static Var Targets
	ReadOnly Static Var Fnt = ImageFont.Obtain("SYSFONT")
	Static Get String WantTarget
		Return Act.Act.Target
	End
	
	Static Void ComeToMe(_Act)
		Act = _Act
		Stage.Current = "PLAYERINPUT_SELECTTARGET"
		OldMouseX = -10000
		OldMouseY = -10000
		Targets = nil
	End
	
	Void Debug()
		CSayF("Action Title: %s",Act.Act.Title)
		CSayF("= Executor: %s",Act.ExeTag)
		CSayF("= Want Target: %s",WantTarget)
		CSay("= Targets selected:")
		For i,t in ipairs(Targets)
			CSayF(". = Target #%d (%s) in hover",i,t)
		End
		CSay("= Targets available in general:")
		For tag,data in spairs(Lua.Neil.Globals.Fighter.ByTag)
			CSayF("= %s True:(%d,%d) %dx%d / AS(%d,%d) %dx%d",tag,data.TX,Data.TY,Data.TW,Data.TH,Data.X,Data.Y,Data.W,Data.H)
		End
		CSayF("Mouse: (%d,%d)",Mouse.MX,Mouse.MY)
	End
		
		
	
	Void Update()
		If OldMouseX==Mouse.MX && OldMouseY==Mouse.MY && (!Mouse.ML)
			Return
		End
		OldMouseX,OldMouseY = Mouse.MX,Mouse.MY
		Switch WantTarget
			Case "OS"
				Targets = Targets || {Act.Act.ExeTag}
			Case "EV" 
				If !Targets
					Targets = {}
					For K,_ in sPairs(Fighter.ByTag)
						Targets += K
					End
				End
			Case "AA"
				If !Targets
					Targets = {}
					For K,F in sPairs(Fighter.ByTag)
						If F.Team=="Hero"
							Targets += K
						End
					End
				End
			Case "AF"
				If !Targets
					Targets = {}
					For K,F in sPairs(Fighter.ByTag)
						If F.Team=="Foe"
							Targets += K
						End
					End
				End
			Case "1F"
				Targets = Targets || {}
				Targets[1] = nil
				For K,F in sPairs(Fighter.ByTag)
					Int TX
					Int TY
					Int TW
					Int TH
					TX,TY,TW,TH = F.TrueCoords()
					If F.Team=="Foe" && Mouse.MX>TX-(TW div 2) && Mouse.MX<TX+(TW div 2) && Mouse.MY<TY && Mouse.MY>TY-TH
						Targets[1]=K
					End
				End
			Case "1A"
				Targets = Targets || {}
				Targets[1] = nil
				For K,F in sPairs(Fighter.ByTag)
					Int TX
					Int TY
					Int TW
					Int TH
					TX,TY,TW,TH = F.TrueCoords()
					If F.Team=="Hero" && Mouse.MX>TX-(TW div 2) && Mouse.MX<TX+(TW div 2) && Mouse.MY<TY && Mouse.MY>TY-TH
						Targets[1]=K
					End
				End
			Default
				Lua.error("Unknown target type: "..WantTarget)
		End		
		If Mouse.ML && #Targets>0
			Int i=0
			Repeat
				i++
				Act.TarTags[i]=Targets[i]
			LoopWhile Targets[i]
			// ^ This seems like an odd way to do it, but this guarantees the transfer went well ^
			CombatFlow.Execution.ComeToMe(Act,CombatFlow.Cards.Lijst[1])
		End
	End
	
	Get String FlashChar
		Return Act.ExeTag
	End

	
	Void Draw()
		For Tag in Each(Targets || {})
			Var F = Fighter.ByTag[Tag]
			Bool ShowBar = True
			Bool BarKnown = True
			Int TX = F.TX
			Int TY = F.TY - (F.TH div 2)
			If F.Team=="Foe"
				ShowBar  = __skill != 3
				BarKnown = __skill == 1 || Killed[Tag]>0
				__Yellow
				Fnt.DarkText(F.Letter..". ",TX,TY-3,1,1)
			End
			__White
			Fnt.DarkText(F.Name,TX,TY-3,0,1)
			If ShowBar
				Int BarSize = Fnt.TextWidth(F.Name)
				Graphics.Color(123,123,123)
				Graphics.Rect(TX,TY,BarSize,20)
				If BarKnown
					Int G = math.floor( (F.HP / F.HPMax) *255)
					Graphics.Color(255-G,G,0)
					Graphics.Rect(TX,TY,math.floor( (F.HP / F.HPMax) * BarSize),20)
				Else
					Graphics.Color(math.random(0,255),math.random(0,255),math.random(0,255))
					Fnt.DarkText("?",TX+(BarSize div 2),TY+10,2,2)
				End
			End
		End
		__Red
		Fnt.DarkText("X",3,3)
		If (Mouse.ML && Mouse.MX<30 && Mouse.MY<20) || Events.KeyHit(27)
			//Lua.Neil.Globals.SPIM.ComeToMe(Act.ExeTag)
			Stage.Current = "PLAYERINPUT_MAIN"
		End
		__White				
		Fnt.DarkText(sprintF("%s: %s",Act.Executor.Name,Act.Act.Title),30,3)
		Mouse.Draw()
	End
End


Bool AAlways()
	Return True
End

// Player Input Menu Item
Class PIMI
	Static Int A
	ReadOnly Int X
	ReadOnly Int Y
	ReadOnly Delegate Allow
	ReadOnly Delegate Action
	ReadOnly Var Icon
	ReadOnly Static Var Lst = new LinkedList()
	ReadOnly String Name
	Int Alpha
	
	Get Int TX
		Return (Screen.W div 2) + X
	End

	Get Int TY
		Return (Screen.H div 2) + Y
	End
	
	Constructor(String _icon,int _x,int _y,_Action,_Allow)
		Lua.assert(Lua.type(_Action)=="function","Function needed for _Action parameter when constructing a PIMI. Now I got a "..Lua.type(_Action).." (".._icon..")")
		X = _x
		Y = _y
		Name = _Icon
		Icon = Image.LoadNew("GFX/Combat/Menu/".._icon..".png","COMBAT_PIMI_"..(_icon:upper()))
		Icon.HotCenter()
		Action = _Action
		Allow = _Allow || AAlways
		Alpha = A
		A -= 100
	End
End



Class Stage_PlayerInput_Main Extends Stage

	Static ReadOnly Var Fnt = ImageFont.Obtain("SYSFONT")
	Static Table Banners = {}
	Static Table Portraits = {}
	Static Int Alpha 
	Static String Exe
	Static Get Var CEx
		Return Fighter.ByTag[Exe]
	End
	
	Static Get Var Executor
		//Return RPGChar[Exe]
		Return Fighter.ByTag[Exe]
	End

	Get String FlashChar
		Return Exe
	End

	Void Draw()
		Int MdX = Screen.W div 2
		Int MdY = Screen.H div 2
		String HText = ""
		Graphics.SetScale(1,1)
		For P in PIMI.lst.Each
			P.Alpha = math.min(255,P.Alpha+1)
			If P.Alpha>0
				Graphics.SetAlpha(P.Alpha)
				If (!P.Allow())
					Graphics.Color(100,100,100)
				ElseIf Mouse.MX>P.TX-20 && Mouse.MX<P.TX+20 && Mouse.MY>P.TY-20 && Mouse.MY<P.TY+20
					__White
					HText = P.Name
					If Mouse.ML
						P.Action()
					End
				Else
					Graphics.Color(180,180,180)
					//Fnt.DarkText(Sprintf("(%d,%d)-(%d,%d) O:(%d,%d), M:(%d,%d)",P.TX-20,P.TY-20,P.TX+20,P.TY+20,P.TX,P.TY,Mouse.MX,Mouse.MY),P.TX,P.TY) // Debug line!
				End
				P.Icon.Draw(MdX+P.X,MdY+P.Y)
			End
		End
		Graphics.SetAlpha(Alpha)
		Alpha = math.min(255,Alpha+1)
		__white
		Portraits[Exe].Draw(MdX-250,MdY)
		Banners[Exe].Draw(MdX,MdY-250)
		Graphics.SetAlpha(255)
		Mouse.Draw()
		Fnt.DarkText(HText,Mouse.MX+5,Mouse.MY+40)
	End
	
	Void Update()
	End
	
	Static Void ComeToMe(String _Exe)
		Exe = _Exe
		Alpha = 0
		Portraits[Exe] = Image.LoadNew("GFX/BoxText/Portret/"..Exe.."/General.png","PIMI_POR_"..Exe)
		Banners[Exe]   = Image.LoadNew("GFX/Combat/HeroBanners/"..Exe..".png","PIMI_BAN_"..Exe)
		Portraits[Exe].HotCenter()
		Banners[Exe].HotCenter()	
		Stage.Current = "PLAYERINPUT_MAIN"
	End
End
// Laziness!
ReadOnly Var SPIM = Stage_PlayerInput_Main


Class Stage_PlayerInput_Ability Extends Stage

	ReadOnly Int BX = 100
	ReadOnly Int BY = 100
	ReadOnly Int BW = Screen.W - 200
	ReadOnly Int BH = Screen.H - 400
	
	Var ubox 
	
	Static String Exe
	Static Get Var CEx
		Return Fighter.ByTag[Exe]
	End
	
	Static Get Var Executor
		//Return RPGChar[Exe]
		Return Fighter.ByTag[Exe]
	End
	
	String Chosen = ""

	Void Draw()
		ubox = ubox ||  new Box(BX,BY,BW,BH,False)
		ubox.Draw()
		Chosen = Item.AbilityOverview(Exe,bx,by,bw,bh,"InCombat")
		Mouse.Draw()
	End
	
	Void Update()
		If Chosen!=""
			Bool Deduct = True
			// TODO: Marrilona no AP use when HP is too low
			var Act = new Action(Chosen,Exe,{},{["DeductAP"]=Deduct})
			Stage_PlayerSelectTarget.ComeToMe(Act)
			Chosen=""
		End
	End
	
	Static Void ComeToMe(String _Exe)
		Exe = _Exe
		Stage.Current = "PLAYERINPUT_ABILITY"
	End
End

Var CheckAbilityLearn(Act)
	__LoadItemState
	string Abl = ISGET.String("SUB_ITEMS",sPrintF("AblCheckLearn('%s')",Act.Executor.Tag))
	If Abl==""
		Return Act
	End
	Var ActAbl=Item[Abl]
	Table ActTar
	Switch ActAbl.Target
		Case "OS" "1A"
			ActTar = { Act.Executor.Tag }
		Case "EV"
			ActTar = {}
			For k,_ in pairs(Fighter.ByTag)
				ActTar += k
			End
		Case "AF"
			ActTar = {}
			For k,A in pairs(Fighter.ByTag)
				If A.Team=="Foe" 
					ActTar += k
				End
			End
		Case "AA"
			ActTar = {}
			For k,A in pairs(Fighter.ByTag)
				If A.Team=="Hero" 
					ActTar += k
				End
			End
		Case "1F"
			If #Act.TarTags==1 && #Act.Targets[1].Team=="Foe"
				ActTar = Act.TarTags
			Else
				int TimeOut=10000
				string TT
				Repeat
					TimeOut--
					If TimeOut<0
						Lua.error("Ability learn random target time-out")
						Return
					End
					Table TR = Fighter.GetTags("Foe")
					TT = TR[math.random(1,#TR)]
				Until Fighter.ByTag[TT].HP>0
				ActTar = {TT}
			End
		Default
			Lua.error("Ability learn target error: "..ActAbl.Target)			
	End
	String Taggy = Act.Executor.Tag:upper()
	If Prefixed(Taggy,"JAKE")
		Taggy="JAKE"
	End
	BoxText.Serial("LEARNABILITY", Taggy), "FLOW_COMBAT")
	//ISSET("Bool","SUB_ITEMS",sprintf("Abilities.%s.Ability.Unlocked",Act.Executor.Tag),true)
	Return new Action(Abl,Act.Executor.Tag,ActTar,{["Teaching"]=True})
End

#region PIMI reactions
Void PIMI_Attack()
	String WAbl = "AAA_ATTACK"
	Var It = Item[ SPIM.Executor.Char.Data.EQUIP_Weapon ]
	If It.ITM_WeaponAbility
		WAbl = SPIM.Executor.Char.Data.EQUIP_Weapon
	End
	Var Act = new Action(WAbl,SPIM.Exe,{},{["CheckAfterAction"]=true})
	Act = CheckAbilityLearn(Act)
	If Act.Teaching
		CombatFlow.Execution.ComeToMe(Act,CombatFlow.Cards.Lijst[1])
	Else
		Stage_PlayerSelectTarget.ComeToMe(Act)		
	End
End

Void PIMI_Ability()
	Stage_PlayerInput_Ability.ComeToMe(SPIM.Exe)
End

Void PIMI_Items()
End

Void PIMI_Spirata()
	Lua.error("Spirata not implemented yet!")
End

Void PIMI_Guard()
End

Bool NotNostra()
	Return SPIM.Exe!="Nostramantu"
End

Bool HasSpirata()
	String Exe = SPIM.Exe
	If Prefixed(Exe,"Jake")
		Exe = "Jake"
	End
	return gv.gbool["HASSPIRATA."..Exe]
End
#endregion


Init
	Stage.Register("PLAYERINPUT_MAIN",new Stage_PlayerInput_Main())
	Stage.Register("PLAYERINPUT_SELECTTARGET",new Stage_PlayerSelectTarget())
	Stage.Register("PLAYERINPUT_ABILITY",new Stage_PlayerInput_Ability())
	PIMI.Lst.AddLast(new PIMI("Attack",0,0,PIMI_Attack))
	PIMI.Lst.AddLast(new PIMI("Ability",0,-50,PIMI_Ability,NotNostra))
	PIMI.Lst.AddLast(new PIMI("Spirata",0,50,PIMI_Spirata,HasSpirata))
	PIMI.Lst.AddLast(new PIMI("Items",-50,0,PIMI_Items))
	PIMI.Lst.AddLast(new PIMI("Guard",50,0,PIMI_Guard))
End

Return Foe