// License Information:
// src/Tricky Script/Script/Flow/FlowCombat/Class_Action.neil
// Version: 21.10.19
// Copyright (C) 2021 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
Void __ReadOnly()
	Lua.error("Targets array is read-only!")
End

Class Action

	ReadOnly String ActTag
	Get Var Act
		Return Item[ActTag]
	End
	
	ReadOnly String ExeTag
	Get Var Executor
		Return Fighter.ByTag[ExeTag]
	End
	
	ReadOnly Table TarTags
	ReadOnly Table Targets
	
	// These can be easily set through the _XVars
	ReadOnly Bool CheckAfterAction = False
	ReadOnly Bool DeductAP = False
	ReadOnly Bool ConsumeItem = False
	ReadOnly Bool AwardSkillExperience = False
	ReadOnly String AfterMsg = ""
	
	Constructor(String _Act,String _Exe,Table _Targets,_XVars)
		CSayF("Creating action %s for %s",_Act,_Exe)
		ActTag = _Act
		ExeTag = _Exe
		For k,v in Pairs(_XVars || {})
			Self[k] = v
			CSayF("= Extra Variable %s => %s",k,Lua.tostring(v))
		End
		TarTags = _Targets
		Var TarEach()
			Int i=0
			Return Var()
				i++
				If i>#TarTags
					Return nil,nil
				End
				Return Fighter.ByTag[TarTags[i]],TarTags[i],i
			End
		End
		Var TarIndex(s,idx)
			Switch Lua.type(idx)
				Case "nil"
					Lua.error("No index for action targets received!")
				case "number"
					Lua.assert(math.floor(idx)==idx,"Action target index not integer")
					return Fighter.ByTag[TarTags[idx]]
				case "string"
					Switch idx:upper()
						case "COUNT" "LEN" "CNT" "LENGTH"
							return #TarTags
						case "EACH"
							return TarEach()
						default
							Lua.error("Unknown action target command: "..idx)
					End
				default
					Lua.error("Illegal target index. I cannot handle a "..Lua.type(idx).." for this!")
			End
		End
		Targets = Lua.setmetatable({},{["__index"]=TarIndex,["__newindex"]=__ReadOnly})
	End

End


// This is just for multifunctionality
Return Action