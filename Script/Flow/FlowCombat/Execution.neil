// License Information:
// src/Tricky Script/Script/Flow/FlowCombat/Execution.neil
// Version: 21.09.25
// Copyright (C) 2021 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#Use "Script/Use/Misc/Box"
#Macro __Execution CombatFlow.Execution

Class Stage_Execution Extends Stage

	#region Basic crap
	Static ReadOnly Int ASiz = 60
	Static ReadOnly Var AFnt = ImageFont.Obtain("BIGTEXT")
	Static Readonly Int AYPS = Screen.H div 20	
	Static Var ABox 
	Static String ExStage
	Static Var Act
	Static Var Card
	Static Int Time
	Static Bool DoShowBox
	Static Void ComeToMe(_Act,_Card)
		Act          = _Act
		Card         = _Card
		ExStage      = "Start"
		Time         = 250
		Self.Current = "Execution"
		DoShowBox    = True
	End
	
	Void Update()
		Self["Update_"..ExStage]()
		//DoShowBox = Stage.Current == Self
	End
	
	Void Draw()		
		Self["Draw_"..ExStage]()
	End
	
	Static Void ShowBox()
		If DoShowBox
			ABox.Draw()
			AFnt.DarkText(Act.Act.Title,Screen.W div 2,AYPS + (ASiz div 2),2,2)
			If Card
				Image.Rotate = -30
				card.Img.XDraw(50,AYPS + (ASiz div 2))
				Image.Rotate = 0
			End
		End
	End

	#endregion
	
	
	
	#region Start
	Const Delegate Draw_Start = NIKS
	Void Update_Start()
		Time--
		If Time==0
			ExStage="Pose"
		End
	End
	#endregion
	
	#region Pose
	Const Delegate Draw_Pose = NIKS
	Void Update_Pose()
		If Act.Executor.Pose(Act)
			ExStage="SpellAni"
		End
	End
	#endregion
	
	#region SpellAni
	Var SpellAni
	Void Update_SpellAni()
		Static Bool Initiated = False
		DoShowBox = False
		if Act.Act.SpellAni==""
			Initiated = False
			SpellAni = nil
			ExStage="Effect"
			Return
		End
		if !Initiated
			SpellAni = NeilUse("Script/Use/Combat/SpellAni/"..Act.Act.SpellAni)
			SpellAni.Start(Act.Act.SpellAni_Arg)
			Initiated = True
		End
		SpellAni.Update()
		If SpellAni.Ended
			Initiated = False
			SpellAni = nil
			ExStage="Effect"
			Return
		End
	End
	
	Void Draw_SpellAni()
		If SpellAni
			SpellAni.Draw()
		End
	End
	#endregion
	
	#region Effect
	Const Delegate Draw_Effect = NIKS
	Void Update_Effect()
		//For Tar,TarTag,idx in Act.Targets.Each
		For TarTag in Each(Act.TarTags)
			If !Effect.Run(Act,TarTag)
				charmsg(tartag,"Miss")
			End
		End
		ExStage="AfterAction"
	End
	#endregion
	
	#region After Action
	Const Delegate Draw_AfterAction = NIKS
	Static Var AfterActions = {}
	
	Void Update_AfterAction()
		// After Action Script 
		String AA_Dir = "Script/Use/Combat/AfterAction/"
		String AA_File = AA_Dir
		Switch Act.Executor.Team
			Case "Hero"
				String T = Act.Executor.Tag
				Switch Act.Executor.Tag
					Case "Jake_Human" "Jake_Fairy"
						T = "Jake"
					Default
				End
				AA_File += "Hero/"..T
			Case "Foe"
				AA_File += "Foe/"..Act.Executor.File
			Default
				Lua.error("Invalid team")
		End
		If JCR6.EntryExists(AA_File..".neil")
			AfterActions[AA_File] = AfterActions[AA_File] || NeilUse(AA_File)
			AfterActions[AA_File](Act)
		End
			
		If Act.Executor.Team=="Hero"
			// To make sure only the last one to act speaks and moves (in boss they all move, but only the last actor speaks)
			LastAction = Act.Executor.Tag
			// Pose to normal
			Act.Executor.Stage = "IDLE"
			// AP Up
			Act.Executor.AP += Act.Act.rew_GainAP
			// Skill up
			For ski=1,5
				Party.IncSkill(Act.Executor.Tag,ski,Act.Act["rew_GainSkill"..ski],Act.Act["rew_CreateSkill"..ski])
			End
		End
		// Is there a message? (Should only be used for learning new spells).
		If act.aftermsg!=""
			CharMsg(act.executor.tag,act.aftermsg,0,180,255)
		End
		// Lastly remove the front card and go back to the "IDLE" mode
		FlowCombat.Cards.DelShift()
		Stage.Current = Nil
	End
	
	Constructor
		ABox = ABox || new Box(0,AYPS,Screen.W,ASiz,false)
	End


End

Init
	Stage.Register("Execution",new Stage_Execution())
End

Return Stage_Execution