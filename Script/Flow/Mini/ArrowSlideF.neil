// License Information:
// src/Tricky Script/Script/Flow/Mini/ArrowSlideF.neil
// Version: 22.01.29
// Copyright (C) 2017, 2022 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

// Please note, this is a converted Lua script
#use "Script/Use/Anyway"
#use "Libs/Keys"

//-- @DEFINE ARROWDEBUG
#define ARROWDEBUG

const delegate upper = Lua.string.upper

plua Blocks = nil
plua Arrows = nil
plua PLAYER = nil
plua APLAY  = nil
plua Field  = nil
plua Play   = {["x"]=0,["y"]=0}
plua godirs
plua ArrowKeys
plua WASDKeys
plua Buttons
plua AWind

plua iButtons

//-- function DrawScreen() MS.Run("FIELD","DrawScreen") end
Void DrawScreen()
	Graphics.Cls()
	Map.DrawScreen() //Maps.Draw()
End  


//function GALE_OnLoad()
Init
  ArrowKeys = {["Up"]=Keys.Up,["Down"]=Keys.Down,["Right"]=Keys.Right,["Left"]=Keys.Left}
  ///WASDKeys = {Up=KEY_W,Down=KEY_S,Right=KEY_D,Left=KEY_A}
  WASDKeys = {["Up"]='w', ["Down"]='s', ["Right"]='d', ["Left"]='a'}
  //Joy = {Up=joy_up,Down=joy_down,Right=joy_right,Left=joy_left}
  AWIND = {["Up"]="North",["Down"]="South",["Right"]="East",["Left"]="West"}
  Buttons = {["Up"]={["c"]={32,0}, ["p"]="UP"}, ["Down"]={["c"]={32,64}, ["p"]="DN"}, ["Left"]={["c"]={0,32},["p"]="LF"}, ["Right"]={["c"]={64,32}, ["p"]="RT"}} 
  iButtons={}
  for bk,bt in pairs(Buttons) 
  	iButtons[#iButtons+1]=bt 
  end
  plua ButtOfs= {32,Screen.Height-200}
  for b in each(iButtons) 
      b.img = Image.LoadNew("GFX/Textures/EarthPuzzle/AR_"..b.p..".png","EarthPuzzle_AR_"..b.p)
      b.x=b.c[1]+ButtOfs[1]
      b.y=b.c[2]+ButtOfs[2]
  end
  //Print(serialize("Buttons",Buttons))
  //Print(serialize("iButtons",iButtons))
end

Void DestroyPics()
	for b in each(Buttons)
		b.img.kill()//Image.Free(b.img)
	end
End      

Var PlayBlock(x,y)
    //-- return Maps.Block(x,y)>0
    Bool crackblock = false
    for b in each(Blocks) 
       crackblock = crackblock || ( b.px==x && b.py==y )
    end              
    return (not Field[y]) or Field[y][x]=="X" or crackblock
end

Var BlockBlock(x,y)
   Bool ok = PlayBlock(x,y)
   //--for a in each(Arrows) do
       ok = ok or(Field[y] and ( Field[y][x]=="R" or Field[y][x]=="L" or Field[y][x]=="U" or Field[y][x]=="D") ) //--and (math.floor(x/32)~=math.floor(a.spotx/32) or math.floor(y/32)~=math.floor(a.spoty/32))
   //--end
   for b in each(Blocks) 
       ok = ok or ( b.px==x and b.py==y )
   end    
   return ok
end

Void MoveBlocks(px,py)
   //--[[
   //--local px = math.floor(tx/32)
   //--local py = math.floor(ty/32)
   //CSay("Gonna Check Arrows for position: ("..px..","..py..") Playpos ("..tx..","..ty..")")
   //for a in each(Arrows) 
   //    CSay("= Arrow on ("..math.floor(a.spotx/32)..","..math.floor(a.spoty/32)..")")
   //    if math.floor(a.spotx/32)==px and math.floor(a.spoty/32)==py then
   //       CSay("Arrow hit")
   //      for b in each(Blocks) 
   //           Plua tox,toy=b.tox+(a.GoX*32),b.toy+(a.GoY*32)
   //           if not BlockBlock(tox,toy) 
   //           	b.moving,b.tox,b.toy=true,tox,toy 
   //           end
   //       end    
   //    end
   //end
   //]]
   CSayF("Check Moveblocks(%03d,%03d)",px,py)
   
   #if IGNORE
   for iy,_x in pairs(Field)
       for ix,iv in pairs(_x)
           CSayF("(%03d,%03d) >> %s",ix,iy,iv)
       end
   end
   #fi
   
   if not Field[py]
   	  CSayF("= Rejected! Nothing on y!")
      return 
   end
   if not Field[py][px]
   	  CSayF("= Rejected! Nothing on x!")
      return 
   end
   static var _Moves = { ["U"]= {["y"]=-1}, ["D"]={["y"]=1}, ["L"]={["x"]=-1}, ["R"]={["x"]=1}}
   PLUA f = Field[py][px]
   PLUA movement = _Moves[f]
   if not movement 
      CSayF("= Rejected. No movement for %s",Lua.tostring(f))
      return 
   end
   CSayF("= Accepted! Preparing to move!")
   movement.y=movement.y or 0
   movement.x=movement.x or 0
   for b in each(Blocks)
       PLUA newx=b.px+movement.x
       PLUA newy=b.py+movement.y
       CSayF("Block (%03d,%03d)/(%05d,%05d) -> (%03d,%03d)/(%05d,%05d):>%s",b.px,b.py,b.tox,b.toy,newx,newy,b.tox + (movement.x*32),b.toy + (movement.y*32),lua.tostring(Map.Block(b.tox + (movement.x*32),b.toy + (movement.y*32))))
       if (not BlockBlock(newx,newy)) 
       // && (!Map.Block(b.tox + (movement.x*32),b.toy + (movement.y*32))) 
          b.moving = true
          b.tox = b.tox + (movement.x*32)
          b.toy = b.toy + (movement.y*32)
          b.px = newx
          b.py = newy
       end   
   end
end

Void PlayGo(x,y,d)
   PLUA tpx = Play.x+x
   PLUA tpy = Play.y+y
   PLUA tx = (tpx*32)+16 
   PLUA ty = (tpy*32)+32 
   PLUA ok = true
   ok = ok and (not PlayBlock(tpx,tpy))
   ok = ok and (!Map.Block(tpx,tpy))
   ok = ok and (!APLAY.Moving) and (!APLAY.Walking) 
   for block in each(Blocks) 
       ok = ok and (not block.moving) 
   end
   //ok = ok and (INP.KeyH(ArrowKeys[d])==1 or INP.KeyH(WASDKeys[d])==1 or joyhit(Joy[d]) or Buttons[d].clicked)
   ok = ok && (Events.KeyHit(ArrowKeys[d]) || Events.KeyHit(WASDKeys[d]) || Buttons[d].clicked)
   //CSayF("PlayGo: %6s> Arrow: %03d/%s; WADS: %03d/%s; Clicked: %s",d,ArrowKeys[d],Lua.tostring(Events.KeyHit(ArrowKeys[d])),WASDKeys[d],Lua.tostring(Events.KeyHit(WASDKeys[d])),Lua.tostring(buttons[d].clicked))
   if ok 
   	  CSayF("%8s>Move player from: (%d,%d) to (%d,%d)! True(%d,%d)->(%d,%d)",d,play.x,play.y,APLAY.X,APLAY.Y,tpx,tpy,tx,ty)
      Play.x=tpx
      Play.y=tpy
      // Actors.MoveTo(PLAYER,tx,ty,1)
      APLAY.X = tx
      APLAY.Y = ty
      //Actors.ChoosePic(PLAYER,Var.C("$CRACKCHAR").."."..upper(AWIND[d]))
      Map.SetObj(PLAYER,"Texture","GFX/Actors/Bundled/Player/"..gv.gstr.CRACKCHAR.."."..upper(AWIND[d]..".jpbf"))
      MoveBlocks(tpx,tpy) 
   end
end

Void BlockMoveExec()
   Plua remap = false
   for block in each(Blocks) 
       if block.moving 
          if     block.object.X<block.tox 
                 block.object.X = block.object.X + 1
          elseif block.object.X>block.tox
                 block.object.X = block.object.X - 1 
          end 
          if     block.object.Y<block.toy
                 block.object.Y = block.object.Y + 1
          elseif block.object.Y>block.toy
                 block.object.Y = block.object.Y - 1 
          end
          if     block.object.X==block.tox and block.object.Y == block.toy 
                 block.moving=false 
                 remap=true 
          end 
       end
   end
   if remap 
      Map.Remap() 
   end
end 

Init
	Void Up() 
		PlayGo( 0,-1,"Up") 
	end
	
	Void Down()  
		PlayGo( 0, 1,"Down") 
	end
	
	Void Right()
		PlayGo( 1, 0,"Right")
	end
	
	Void Left()  
		PlayGo(-1, 0,"Left")
	End
	
	godirs = {Up,Down,Right,Left}
End

// Quick class to convert from LAURA II
class qobj
	readonly int id
	Constructor(_id)
		switch Lua.type(_id)
			case "number"
				id = _id
			case "string"
				id = Map.GetObjInt(_id,"ID")
			default
				Lua.error("?")
		end
	End
	
	Get Int X
		Return Map.GetObjInt(id,"X")
	End
	Get Int Y
		Return Map.GetObjInt(id,"Y")
	End
	Get String TextureFile
		Return Map.GetObjString(id,"Texture"):upper()
	End
	
	Set Int X
		Map.SetObj(id,"X",Value)
	End
	Set Int Y
		Map.SetObj(id,"Y",Value)
	End
	
	set Bool Impassible
		Map.SetObj(id,"Impassible",Value)
	End
	
	Get Bool Moving
		Return Map.GetObjBool(id,"Moving")
	End
	
	Get Bool Walking
		Return Map.GetObjBool(id,"Walking")
	End
End

Global Void InitPuzzle()
	CSay("Initiating puzzle on layer: "..Map.Layer) // debug
    Blocks = {}
    Arrows = {}
    PLAYER = "CRACKPLAYER" // Var.C("$CRACKPLAYER")
    //APLAY = Actors.Actor(PLAYER)
    CSay("Creating player data")
    APLAY = new qobj(PLAYER)
    Field = {}
    //Play.x = math.floor(Maps.Obj.Obj("Puz_Start").X/32)
    //Play.y = math.floor(Maps.Obj.Obj("Puz_Start").Y/32)-1
    CSay("Getting puzzle start point")
    Plua Puz_start = new qObj("Puz_Start")
   	Play.x = (Puz_Start.X div 32)
   	Play.y = (Puz_Start.Y div 32) - 1    
    pLUA fdbg = {}
    pLUA maxx=0
    pLua maxy=0     
    pLUA dr = {["DN"]={["Y"]=1},["UP"]={["Y"]=-1},["RT"]={["X"]=1},["LF"]={["X"]=-1}}
    CSay("Scanning objects")
    For oi in each(Map.ObjEnum)
    	//CSayF("= Object: %05d",oi)
    	Var o = new qObj(oi)
        pLUA opx = math.floor(o.X/32)
        pLUA opy = math.floor(o.Y/32)  // Not the most reliable feature, but it "does" the job :P        
        maxx=math.max(opx,maxx) //if maxx<opx then maxx=opx end
        maxy=math.max(opy,maxy) //if maxy<opy then maxy=opy end
        if suffixed(upper(o.TextureFile),"CRACKED.PNG")
           pLUA bx =  math.floor(o.X/32)
           pLUA by =  math.floor(o.Y/32) - 1
           Field[by] = Field[by] or {}               
           Field[by][bx]="B"
           pLUA block = {["orix"]=o.X, ["oriy"]=o.y, ["tox"] = o.X, ["toy"]=o.Y, ["moving"]=false, ["wasmoving"]=false, ["object"]=o, ["porix"]=bx, ["poriy"]=by, ["px"]=bx, ["py"]=by}
           Blocks[#Blocks+1]=block                      
        end
        for k,v in pairs(dr) 
            if suffixed(upper(o.TextureFile),"AR_"..k..".PNG") 
               //[[
               //arrow = {}; Arrows[#Arrows+1]=arrow
               //arrow.GoX = v.X or 0
               //arrow.GoY = v.Y or 0
               //arrow.spotx = o.X
               //arrow.spoty = o.Y
               //arrow.object = o
               //]]
               pLUA fx = math.floor(o.X/32)
               pLUA fy = math.floor(o.Y/32) - 1
               //pLUA fy = math.floor(o.Y/32) 
               Field[fy] = Field[fy] or {}               
               Field[fy][fx]=left(k,1)
               CSayF("Arrow: %s (%03d,%03d): %s",k,fx,fy,Lua.tostring(Field[fy][fx]))
            end   
        end
    end
    #if ARROWDEBUG
    CSay("PuzSize = "..maxx.."x"..maxy)
    #fi
    // //[[
    for x=0,maxx    	
     	for y=0,maxy
     		//CSayF("Tile: (%04d,%04d)",x,y)
            Field[y] = Field[y] or {}
            Field[y][x] = Field[y][x] or ({[false]=" ",[true]="X"})[Map.Block((x*32)+16,(y*32)+16,true)]
            #if ARROWDEBUG
            fdbg[y] = fdbg[y] or ""
            fdbg[y] = fdbg[y] .. (Field[y][x] or "?")
            #fi
        end 
    end
    //#if IGNORE
    for y,fdy in ipairs(field)
        string dbg = "" 
        for x,v in pairs(fdy)
            dbg += v
        end
        CSayF("%03d> %s",y,dbg)
    end
    // ]]   
    #if ARROWDEBUG
    //Print(serialize("field",fdbg))
    #fi
    CSay(#Blocks.." movable blocks have been found in this puzzle")
    //CSay(#Arrows.." arrow spots have been found in this puzzle") 
    // CSay(serialize("Arrows",Arrows)) // Debug line   
    //repeat
    //   Cls(); MS.Run("FIELD","DrawScreen"); Flip()
    //until APLAY.Moving==0 and APLAY.Walking==0
    Map.StopWalking()
end

Bool Forfeit()
    //if getpress.cancel() or mousehit(2) or Maps.ActorInZone(PLAYER,'Forfeit')==1 then
    if Mouse.MR || Map.InZone(PLAYER,"Forfeit")
       #if IGNORE
       //local s = Maps.Obj.Obj("Start")
       plua s = new qObj("Start")
       APLAY.X = s.X
       APLAY.Y = s.Y
       for block in each(Blocks) 
           block.tox=block.orix
           block.toy=block.oriy
           block.px =block.porix
           block.py =block.poriy
           block.object.X=block.orix
           block.object.Y=block.oriy
       end
       //Maps.Obj.Kill(PLAYER)
       Map.Kill(PLAYER)
       //Actors.Actor("PLAYER" ).SetAlpha(1000)
       //Actors.Actor("PLAYER1").SetAlpha(1000)
       //Actors.Actor("PLAYER2").SetAlpha(1000)
       //Actors.Actor("PLAYER3").SetAlpha(1000)
       Map.SetObj("PLAYER","Alpha",255)
       For i=2,4
       	Map.SetObj("PLAYER"..i,"Alpha",255)
       End
       //LAURA.FLOW("FIELD")
       Flow.Current="FIELD"
       DestroyPics()
       //MS.Destroy("CRACKPUZ")
       #fi
       Flow.Current="FIELD"
       Map.GoToMap(Map.LoadedMap,Map.Layer,"Start")       
       return true
    end
    Return False
end

Void Goal()
       // if Maps.ActorInZone(PLAYER,"Goal")==0 then return end
       if !Map.InZone(PLAYER,"Goal")
           Return
       End
       plua pobjects = {}
       //for po in KthuraLabelEach('Puzzle') do pobjects [ #pobjects + 1 ] = po; po.Impassible = 0 end
       for pi in Map.LabelEach("Puzzle")
       	   plua po = new qobj(pi)
           pobjects += po
           po.Impassible = false
       End
       Map.ReMap()
       //Actors.WalkToSpot("PLAYER" ,PLAYER)
       //Actors.WalkToSpot("PLAYER1",PLAYER)
       //Actors.WalkToSpot("PLAYER2",PLAYER)
       //Actors.WalkToSpot("PLAYER3",PLAYER)
       Lua.Neil.Globals.Player.walkTo(PLAYER)
       //for alpha=0,1000,25 do
       for alpha=0,255
           //Actors.Actor("PLAYER" ).SetAlpha(alpha)
           //Actors.Actor("PLAYER1").SetAlpha(alpha)
           //Actors.Actor("PLAYER2").SetAlpha(alpha)
           //Actors.Actor("PLAYER3").SetAlpha(alpha)
           Map.SetObj("PLAYER","Alpha",alpha)
           for i=2,4
               Map.SetObj("PLAYER"..i,"Alpha",alpha)
           End
           for po in each(pobjects) 
           	   //po.SetAlpha(1000-alpha)
           	   Map.SetObj(po.ID,"Alpha",255-alpha)
           end
           //Actors.Actor(PLAYER).SetAlpha(1000-alpha)
           Map.SetObj(PLAYER,"Alpha",255-alpha)
           Graphics.Cls()
           Map.DrawScreen()
           Graphics.Flip()
           Events.Poll()
           FPS.WaitMinTicks()
       end
       for i=1,4 
           plua Tag = RPGParty[i]
           //RPG.IncStat(tag,"EXP",(-900)/skill)
           RPGChar[Tag].Stat.Experience -= (900 div __skill)
       end
       //Maps.Obj.Kill(PLAYER)
       //Map.Kill(PLAYER)
       Map.HideObj(PLAYER)
       CSayF("Hiding object #%04d",APLAY.ID)
       //Maps.ObjectList.KillByLabel("Puzzle",1)
       //Map.KillByLabel("Puzzle",true)
       //CSay("Remapping")
       //Map.ReMap()
       CSay("Cleaning picture memory")
       DestroyPics()
       CSay("Going back to the field")
       Flow.Current="FIELD" //LAURA.FLOW("FIELD")       
       //MS.Destroy("CRACKPUZ")   
       CSay("Goodbye")
       gv.gbool[sprintf("crackpuzzle.%s[%s]",gv.gstr.LoadedMap,Map.Layer)]=true
       return true                   
end

Void AutoScroll()
   Int camx = APLAY.X-(Screen.W div 2)
   Int camy = APLAY.Y-(Screen.H div 2)
   if Map.CamX>camx 
      Map.CamX=Map.CamX-1 
   elseif Map.CamX<camx 
      Map.CamX=Map.CamX+1 
   end
   if Map.CamY>camy 
      Map.CamY=Map.CamY-1 
   elseif Map.CamY<camy 
          Map.CamY=Map.CamY+1 
   end
end


//function MAIN_FLOW()
global void APOLLO_Flow()
	static var f = ImageFont.Obtain("SYSFONT")
	__White
	Graphics.Alpha(255)
	f.DarkText(sprintf("(%03d,%03d)",APLAY.X,APLAY.Y),screen.W-10,10,1)
	Dev.ToConsole()	
   graphics.Cls()
   DrawScreen() //MS.Run("FIELD","DrawScreen")
   MapScript.Update() //MS.Run("MAP","MAP_FLOW")
   //--Box(0,0,160,160)
   plua mx
   plua my
   mx,my = Mouse.MX,Mouse.MY //MouseCoords()
   Graphics.Alpha(255) //Image.SetAlphaPC(100)
   __white
   plua mhit = Mouse.ML
   plua dbgy = 200
   // //[[
   for b in each(iButtons) 
       // CSay(serialize('button',b))
       // DarkText(serialize(b.p,b),5,dbgy); dbgy=dbgy+25
       b.img.Draw(b.x,b.y) //Image.Show(b.img,b.x,b.y)
       b.clicked = mhit and mx>=b.x and mx<b.x+32 and my>=b.y and my<b.y+32
       //f.DarkText(Lua.tostring(b.clicked),b.x,b.y) // debug only
   end    
   // DarkText(mx..","..my,20,dbgy)
   //]]
   Mouse.Draw() //ShowMouse()
   plua yeahyeah = Forfeit() or Goal()
   if !yeahyeah
   	  BlockMoveExec()
      AutoScroll()
      Graphics.Flip()   
      for go in each(godirs) 
          go()
      end
   end
end