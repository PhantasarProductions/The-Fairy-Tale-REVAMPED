// License Information:
// src/Tricky Script/Script/Use/Link.neilbundle/Map.Neil
// Version: 21.07.29
// Copyright (C) 2021 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

Global Table MapScript

Module

	ReadOnly Var Meta
	
	Get Delegate CSayF
		return Lua.Neil.Globals.CSayF
	End


	Void MCall(String func,a,b,c,d,e,f,g,h)
		String pr
		For i,p in iPairs {a,b,c,d,e,f,g,h}
			If i>1 
				pr += ", "
			End
			Switch lua.type(p)
				Case "string"
					pr += "\""..p.."\""
				Case "number" "boolean"
					pr += toString(p)
				Default
					lua.error("Illegal MCall type "..lua.type(p))
			End
		End
		If pr=="" 
			pr = "nil"
		End
		State.Call("FLOW_FIELD",func,pr)
	End
	
	Void Schedule(String scriptfunction)
		MCall("FlowField.Schedule.Schedule",scriptfunction)
	End
	
	Void LoadMap(string Map)
		If ApolloState.Name=="MAPSCRIPT"
			MCall("FlowField.Schedule.Add","LOAD:"..Map)
		Else
			MCall("FlowField.LoadMap",Map)
		End
	End
	
	Void Load(string Map)
		LoadMap(Map)
	End
	
	Void GoToMap(string aMap,string aLayer,string SpawnPoint)
		LoadMap(aMap)
		Schedule("LAYER:"..aLayer)
		Schedule("SPAWN:"..SpawnPoint)
	End
	
	Void Spawn(string ActTag,a,b)
		Switch Lua.type(a)
			Case "string"
				CSayF("Spawning ActTag '%s' on spot '%s'",ActTag,a)
				MCall("FlowField.Map.CurLayer.Spawn",{"\""..ActTag.."\"","\""..a.."\""})
			Case "number"
				assert(Lua.type(b)=="number","n::Illegal spawn function call")
				CSayF("Spawning ActTag '%s' on coordinates (%4d,%4d)",ActTag,a,b)
				MCall("FlowField.Map.CurLayer.Spawn",ActTag,a,b)
			Default
				Lua.error("t::Illegal spawn function call")			
		End
	End
	
	Void SpawnPlayer(a,b)		
		Spawn("PLAYER",a,b)
	End
	
	Void Script(String Func,Args="nil")
		State.Call("MAPSCRIPT","MScript."..Func,"\""..Lua.tostring(Args).."\"")
	End
	
	CONSTRUCTOR
		table m
		m = {}
		delegate idx(s,string key)
			Void f(para)
				para = para || "nil"
				Script(key,para)
			end
			return f
		end
		m.__index = idx
		Lua.setmetatable(MapScript,m)
		
		string MetaIndex(s,string key)
			//CSayF("Remoye Map Meta Request: %s",key)
			return ISGET.STRING("FLOW_FIELD",sprintf("FlowField.Map.KthuraMap.Meta[\"%s\"]",key))
		end
		Meta = Lua.setmetatable({},{["__index"]=MetaIndex})
	end

End