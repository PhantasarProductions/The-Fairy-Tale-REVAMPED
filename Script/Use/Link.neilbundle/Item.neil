// License Information:
// src/Tricky Script/Script/Use/Link.neilbundle/Item.neil
// Version: 21.11.14
// Copyright (C) 2021 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

#macro __LoadItemState State.LoadNew("SUB_ITEMS","Script/Subs/SubItems.Neil")

#macro __CSay Lua.Neil.Globals.CSay

Var IndexTypes

Var __Overview(int x, int y, int w, int h, string filter,string char="Nobody")
	__LoadItemState
	string Ret = ISGET.String("SUB_ITEMS",sPrintF("OverView(%d,%d,%d,%d,'%s','%s')",x,y,w,h,filter,char))
	If Ret==""
		Return "",nil
	End
	Return Ret,Lua.Neil.Globals.Item[Ret]
End
	
Var __AblOverView(string char,int x,int y, int w, int h,string situation)
	__LoadItemState
	string Ret = ISGET.String("SUB_ITEMS",sPrintF("AblOverView('%s',%d,%d,%d,%d,'%s')",char,x,y,w,h,situation))
	If Ret==""
		Return "",nil
	End
	Return Ret,Lua.Neil.Globals.Item[Ret]
End	

Bool __ItmGive(String ItemTag)
	Var I = Lua.Neil.Globals.Item
	__CSayF("Give %s (already has %d, max %d)",ItemTag,I[ItemTag].Has,I.Max)
	If I[ItemTag].Has<I.Max
		I[ItemTag].Has++
		__CSay("= Accepted")
		Return True
	Else
		__CSay("= Rejected")
		Return False
	End
End

Var __TagIndex(s,string Key)
	Static Table Ret = {}
	Key = Key:upper()
	Switch Key
		Case "CASH"
			return gv.gint.Cash
		Case "MAX"			
			__LoadItemState
			Return ISGET.Int("SUB_ITEMS","MAXITEM")
		Case "OVERVIEW"
			return __Overview
		Case "ABLOVERVIEW" "ABILITYOVERVIEW"
			return __AblOverview
		Case "SAVE"
			Void _S()
				__LoadItemState
				State.Call("SUB_ITEMS","SaveInventory","nil")
			End
			Return _S
		Default
			if !ret[Key]	
				Var __ItemIndex(s, Key2)
					Lua.assert(Lua.type(Key2)=="string","String expected as key for item "..Key.." but what I got is "..Lua.type(Key2).."("..Lua.tostring(key2)..")")
					Key2 = Key2:upper()
					If Key2=="GIVE"
						Return __ItmGive(Key)
					elseif Key2=="SELLPRICE"
						//CSayF("Getting sell price of item %s",Key)
						return ISGET.INT("SUB_ITEMS",sprintf("GetSellPrice(\"%s\")",Key))
					End
					__LoadItemState
					
					If Prefixed(Key2,"ALLOW_")
						Return ISGET.BOOL("SUB_ITEMS",SprintF("Allow('%s','%s')",Key,Right(Key2,#Key2-6)))
					End
					IndexTypes = IndexTypes || NeilUse("Script/Use/Misc/ItemIndexTypes")
					Lua.assert(IndexTypes[Key2],"There is no field named "..Key2.." in the item database! ("..Key..")")
					Return ISGET[IndexTypes[Key2]]("SUB_ITEMS",sprintf("ItemField('%s','%s')",Key,Key2))
				End
				Var __ItemNewIndex(s, string Key2, value)
					Switch Key2:upper()
						Case "NUM" "AMOUNT" "HAS"
							__LoadItemState
							//__CSayF("Linkthrough> Inventory> %s.HAS = %d",key2,value)
							//State.Call("SUB_ITEMS","SetItemHas",sPrintF("'%s',%d",Key,Lua.tonumber(value) || 0))
							State.Call("SUB_ITEMS","SetItemHas",sPrintF("'%s',%d",Key,value))
						Default
							Lua.error("Item."..key.."."..key2.." is either non-existent or read-only!")
					End
				End
				Ret[Key] = Lua.setmetatable({},{["__index"]=__ItemIndex,["__newindex"]=__ItemNewIndex})
			End
			Return Ret[Key]
	End	
End

Void __TagNewIndex(s,string Key,value)
	//__CSay("TagNewIndex:"..Key.." >> "..value)
	Switch key:upper()
		Case "CASH"
			Int MX = 2*(10^(10-gv.gint.skill))
			__CSayF("Cash is now set to %09d shilders!",value)
			gv.gInt.Cash = math.max(0,math.min(MX,value))
		Default
			Lua.error("Item."..key.." is either non-existent or read-only!")
	End
End

Var Ret = Lua.setmetatable({},{["__index"]=__TagIndex,["__newindex"]=__TagNewIndex})

Global Bool TeachSkill(String Ch,String Skl)
	If ISGet.Bool("SUB_ITEMS",sprintf("Abilities.%s.Skill['%s']~=nil",ch))
		Return False
	End
	State.Call("SUB_ITEMS","AblRec.NewSkill",sprintf("'%s','%s'",Ch,Skl))
	Return True
End

Return Ret