// License Information:
// **********************************************
// 
// src/Tricky Script/Script/Use/Link.neilbundle/Party.neil
// (c) Jeroen Broks, 2021, All Rights Reserved.
// 
// This file contains material that is related
// to a storyline that is which is strictly
// copyrighted to Jeroen Broks.
// 
// This file may only be used in an unmodified
// form with an unmodified version of the
// software this file belongs to.
// 
// You may use this file for your study to see
// how I solved certain things in the creation
// of this project to see if you find valuable
// leads for the creation of your own.
// 
// Mostly this file comes along with a project
// that is for most part released under an
// open source license and that means that if
// you use that code with this file removed
// from it, you can use it under that license.
// Please check out the other files to find out
// which license applies.
// This file comes 'as-is' and in no possible
// way the author can be held responsible of
// any form of damages that may occur due to
// the usage of this file
// 
// 
// **********************************************
// 
// version: 21.09.25
// End License Information

Void LoadPartySub()
	State.LoadNew("PARTY","Script/Subs/SubParty.Neil")
End


Module
	Int EVASION(ch)                          
		If not prefixed(ch,"FOE")
			Int spd = RPGChar[ch].Stat.END_Speed
			Number rate = 0.09 / gv.gint.Skill
			Int eva = math.floor(spd * rate)
			RPGChar[ch].Stat.END_Speed.BASE_Evasion = eva
		End                                          
  		Return RPGChar[ch].Stat.END_Speed.BASE_Evasion
  	End
  	
  	Void CreateChar(String Tag, Int Level)
  		LoadPartySub()
  		State.Call("PARTY","SubParty.CreateCharacter",Sprintf("\"%s\",%d",Tag,level))
  	End
  	
  	Void Boxes(string char="")
  		LoadPartySub()
  		State.Call("PARTY","SubParty.Boxes",sprintf("'%s'",char))
  	End
  	
  	Void Portrait(String Ch,Int X,Int Y)
  		LoadPartySub()
  		State.Call("PARTY","SubParty.Portrait",Sprintf("\"%s\",%d,%d",Ch,X,Y))
  	End
  	
  	Get Int Count
  		int r = 0
  		for i=1,4
  			if RPGParty[i] && RPGParty[i]!=""
  				r++
  			end
  		end
  		return r
  	End
  	
  	Int MemNum(String Tag)  		
  		For i=1,4
  			If RPGParty[i]==Tag
  				Return i
  			End
  		End
  		Return 0
  	End
  	
  	Delegate SkillLvlUpMsg
  	Table SLUC
  	
  	Void IncSkill(String Tag, Int Skill, Int Experience,Force)
  		String TagLevel = sPrintF("LVL_Skill%d",Skill)
  		String TagExpnc = sPrintF("LVL_Skill%d",Skill)
  		String TagTitle = sPrintF("Skill%d",Skill)
  		RPGChar[Tag].Points.LVL_Skill1.Have = math.max(1,RPGChar[Tag].Points.LVL_Skill1.Have) 
  		If (RPGChar[Tag].Points[TagLevel].Have>0 || Force) && RPGChar[Tag].Points[TagLevel].Have<RPGChar[Tag].Points[TagLevel].Maximum
  			RPGChar[Tag].Points[TagExpnc].Have += Experience
  			If RPGChar[Tag].Points[TagExpnc].Have == RPGChar[Tag].Points[TagExpnc].Maximum
  				RPGChar[Tag].Points[TagExpnc].Have = 0
  				SkillLvlUpMsg(Tag,RPGChar[Tag].Data[TagTitle].." level up",SLUC[Skill][1],SLUC[Skill][2],SLUC[Skill][3])
  				Var SLUV = NeilUse("Script/Data/Char/"..Tag.."/SkillUp")
  				For k,v in sPairs(SLUV)
  					Lua.Neil.Globals.CSayF("Due to skill %d going up on %s stat '%s' goes up by %02d",Skill,Tag,k,v)
  					RPGChar[Tag].Stat["PERMABUFF_"..k] += v
  				End
  			End
  		End
  	End
  	
  	Constructor
  		Void Niks()
  		End
  		SkillLvlUpMsg = NIKS
  		SLUC = {}
  		SLUC += {  0,255,255}
  		SLUC += {255,  0,  0}
  		SLUC += {  0,255,  0}
  		SLUC += {255,180,180}
  		SLUC += {255, 68,  0}  			
  	End
End