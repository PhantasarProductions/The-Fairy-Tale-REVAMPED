// License Information:
// src/Tricky Script/Script/Use/Misc/TexMove.neil
// Version: 22.01.10
// Copyright (C) 2022 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
Class TMTile
	ReadOnly Int MvX
	ReadOnly Int MvY
	ReadOnly Int ID
	ReadOnly Int ModX
	ReadOnly Int ModY
	
	Get Int X
		Return Map.ObjGetInt(ID,"InsertX")
	End

	Get Int Y
		Return Map.ObjGetInt(ID,"InsertY")
	End
	
	Set Int X
		Map.SetObj(ID,"InsertX",Value % ModX)
	End

	
	Set Int Y
		Map.SetObj(ID,"InsertY",Value % ModY)
	End
	
	Constructor(Int _ID,String Tex,Int _X,Int _Y, int Blend)
		Static String OTex
		Var ITex
		If OTex==Tex
			ITex = Image.Obtain("MOVETEXTEMP")
		Else
			ITex = Image.Load(Tex,"MOVETEXTEMP")
		End
		ID = _ID
		MvX = _X
		MvY = _Y
		ModX = ITex.W
		ModY = ITex.H
		If Blend>0
			Map.SetObj(ID,"Blend",Blend)
		End
		CSayF("Tile: %d;  Move: (%d,%d); Modulo: (%d,%d)",ID,MvX,MvY,ModX,ModY)
	End
End

Module

	Table ObjList
	
	Void SetUp(String Layer,String Tex,Int X, Int Y, Int Blend=0)
		String OldLayer = Map.Layer
		Map.Layer = Layer
		CSayF("TexMove('%s','%s',%d,%d,%d)",Layer,Tex,X,Y,Blend)	
		ObjList[Layer] = {}
		Tex = Tex:upper()
		For id in each(Map.ObjEnum)
			String ObjTex = Map.ObjGetString(id,"Texture"):upper()
			If Suffixed(ObjTex,Tex)
				ObjList[Layer] += New TMTile(id,ObjTex,X,Y,Blend)
			End
		End
		Map.Layer = OldLayer
	End
	
	Void MapSetup(Int Layers1,Int Layers2,String Tex,Int X, Int Y, Int Blend=0)		
		Progress.Create("TexMove",Layers2,255,255,0)
		For L=Layers1,Layers2
			Progress.TexMove = L
			ConfiguringData()
			SetUp(SprintF("#%03d",L),Tex,X,Y,Blend)
		End
		Progress.Kill("TexMove")
	End
		
	Void Update()
		For T in Each(ObjList[Map.Layer])
			T.X += T.MvX
			T.Y += T.MvY
		End
	End
	
	Constructor 
		ObjList = {}
	End
End