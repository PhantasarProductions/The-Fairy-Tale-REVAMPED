// License Information:
// src/Tricky Script/Script/Use/Misc/PSaveGame.neil
// Version: 21.08.01
// Copyright (C) 2020, 2021 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

void MakeHeader()
	string r = "Map:"..gv.gStr.MapTitle.."\n"
	r += "Difficulty:"..({"Easy","Casual","Hard"})[gv.vInt.skill].."\n"
	r += "Saved:"..gv.vInt.Saved.."\n"
	For i=1,4
		String Ch
		Ch=RPGParty[i]
		If Ch!=""
			r += sPrintF("P1:%s:%d\n",Ch,RPGChar[Ch].Stat.Level)
		End
	End			
	SaveGame.Data.Head = r
end

global void PerformSaveGame(string f)
	GV.vInt.Saved++
	CSayF("Saving: %s",f)
	SaveGame.Clear()
	SaveGame.Assign(f)
	SaveGame.Data["*PARTY"] = "YES"
	SaveGame.Data["GAMEVARS.NEIL"] = GV.Enroll
	Map.SG()
	//Ach.Save()
	//WorldMap.Save()
	if f=="QUIT"
		SaveGame.Data["KILL ME"]="KILL ME"
	end
	MakeHeader()
	SaveGame.Save()	
end

#if __IGNORE__
void Process(int p)
	static int max = 10
	Graphics.Cls()
	Loading()
	Graphics.Color(100,100,100)
	Graphics.Rect(0,Screen.H-10,Screen.W,10)
	Graphics.Color(255,math.ceil( (p/max)*180 ), 0)
	Graphics.Rect(0,Screen.H-10,math.ceil( (p/max)*Screen.W),10)
	Graphics.Flip()
	Events.Poll()
end
#fi

global bool PerformLoadGame(string f)
	static var tfnt
	Int MProcess=10
	Progress.Create("LOADSAVEGAME",MProcess,180,255,0)
	Loading()
	Progress.LOADSAVEGAME = 1
	Loading()
	CSay("Clearing SaveGame buffer")
	Progress.LOADSAVEGAME = 2
	Loading()
	SaveGame.Clear()
	Progress.LOADSAVEGAME = 3
	Loading()
	SaveGame.Assign(f)
	CSayF("Loading: %s",f)
	//try
		// Load in general
		Progress.LOADSAVEGAME = 4
		Loading()
		SaveGame.Load()
		// Game Vars (must be first, as some data I need later is in there!
		Progress.LOADSAVEGAME = 5
		Loading()
		CSayF("Parsing Game Vars")
		NeilDoString(SaveGame.Data["GAMEVARS.NEIL"],"SG:GameVars.Neil")
		// Map
		Progress.LOADSAVEGAME = 6
		Loading()
		CSay("Loading Field Flow")
		Flow.Load("FIELD","Script/Load/LoadField.neil")
		CSay("Parsing Permakills")
		Progress.LOADSAVEGAME = 7
		Loading()
		State.Call("FLOW_FIELD","LGPermakills","nil")
		Progress.LOADSAVEGAME = 8
		Loading()
		CSay("Map stuff")
		State.Call("FLOW_FIELD","LGMap","nil")	
		Progress.LOADSAVEGAME = 9
		Loading()
		//Ach.Load() // To do!
		Progress.LOADSAVEGAME = 10
		Loading()
		//WorldMap // Todo!
	//catch e
	// Lua.error("Loading game not yet implemented. Working on it!")
	if SaveGame.HasData("KILL ME")
		SaveGame.Mutilate()
	end
	
	return true
end


global string GetSGFileName(int page,int slot)
	return SPRINTF("The Fairy Tale Revamped - Saved Game.%06d.%03d",page,slot)
end

global table GetHeader(int page,int i)
	table ret
	string h = SaveGame.GetHeader(GetSGFileName(page,i))
	// cout("<SaveGame Header ",i,">\n",h,"\n</SaveGame Header>\n")
	table lines = Split(h,"\n")
	for _,line in ipairs(lines)
		// cout("Parse> ",line,"\n")
		table chopped = Split(line,":")
		print(Serialize("chopped",chopped),#chopped)
		if #chopped==2
			ret[chopped[1]] = chopped[2]
		end
	end
	//print(Serialize("SG"..page.."."..i,ret))
	return ret
end