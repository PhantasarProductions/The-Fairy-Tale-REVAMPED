// License Information:
// src/Tricky Script/Script/Use/Misc/SlidePuzzle.neil
// Version: 22.02.02
// Copyright (C) 2022 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
Module Class
	
	ReadOnly Int Size = 5

	Int TileID(int x,int y)
		return ((y-1)*size)+x
	End
	
	Int TileValue(int x,int y,newvalue)
		if newvalue
			Map.SetObj("T"..TileID(x,y),"AnimFrame",newvalue)
		end
		return Map.GetObjInt("T"..TileID(x,y),"AnimFrame")
	End
	
	Void Reset()
		for i=1,(size^2)
			Map.SetObj("T"..i,"AnimFrame",i-1)
		end
	End
	
	#region sliding
	Void Up(col)
		if type(col)=="string"
			col = Lua.tonumber(col)
		end
		int Keep = TileValue(col,1)
		for i=1,size-1
			TileValue(col,i,TileValue(col,i+1))
		end
		TileValue(col,size,keep)
	End
	
	Void Down( col)
		if type(col)=="string"
			col = Lua.tonumber(col)
		end
		int Keep = TileValue(col,size)
		for i=size,2,-1
			TileValue(col,i,TileValue(col,i-1))
		end
		TileValue(col,1,keep)
	End

	Void Left( row)
		if type(row)=="string"
			row = Lua.tonumber(row)
		end

		int Keep = TileValue(1,row)
		for i=1,size-1
			TileValue(i,row,TileValue(i+1,row))
		end
		TileValue(size,row,keep)
	End
	
	Void Right(row)
		if type(row)=="string"
			row = Lua.tonumber(row)
		end
		int Keep = TileValue(size,row)
		for i=size,2,-1
			TileValue(i,row,TileValue(i-1,row))
		end
		TileValue(1,row,keep)
	End
	#endregion
	
	Get Bool Good
		Bool Ret = True
		for i=1,Size^2
			Ret = Ret && Map.GetObjInt("T"..i,"AnimFrame")==(i-1)
		end
		Return Ret
	End
	
	Void Start(int keer)
		Static Var a = {Up,Down,Left,Right}
		Int TimeOut  = 10000
		Repeat
			TimeOut--
			Lua.assert(TimeOut>0,"Slide puzzle generation timeout")
			for i=1,keer
				a[math.random(1,#a)](math.random(1,size))
			end
		LoopWhile Good
	End
		
	static var zad
	
	Constructor(int siz,string o)
		Size=siz
		zad = zad || {}
		for i=1,siz
			if !zad[i]
				zad[i]=true
				ZA.Enter("D"..i,o..".Down",i)
				ZA.Enter("U"..i,o..".Up",i)
				ZA.Enter("R"..i,o..".Right",i)
				ZA.Enter("L"..i,o..".Left",i)
			end
		end
	End
End