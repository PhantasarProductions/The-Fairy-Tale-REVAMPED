// License Information:
// **********************************************
// 
// src/Tricky Script/Script/Subs/SubParty.neil
// (c) Jeroen Broks, 2021, All Rights Reserved.
// 
// This file contains material that is related
// to a storyline that is which is strictly
// copyrighted to Jeroen Broks.
// 
// This file may only be used in an unmodified
// form with an unmodified version of the
// software this file belongs to.
// 
// You may use this file for your study to see
// how I solved certain things in the creation
// of this project to see if you find valuable
// leads for the creation of your own.
// 
// Mostly this file comes along with a project
// that is for most part released under an
// open source license and that means that if
// you use that code with this file removed
// from it, you can use it under that license.
// Please check out the other files to find out
// which license applies.
// This file comes 'as-is' and in no possible
// way the author can be held responsible of
// any form of damages that may occur due to
// the usage of this file
// 
// 
// **********************************************
// 
// version: 21.08.01
// End License Information

#Use "Script/Use/Anyway"
#Use "Script/Use/Misc/Box"

#macro __BoxPosY Screen.H-100

Table SubStat = {"BASE","BUFF","PERMABUFF","EQUIP","END","MASTER"}
Table Stats = {"Power","Endurance","Intelligence","Resistance","Speed","Accuracy","Evasion","Critical","HP","AP"}
Table Elements = {"Flame","Wind","Water","Earth","Lightning","Frost","Light","Darkness"}
Table Ailments = {"Poison","Disease","Paralysis","Curse","Silence","Sleep","Death"}



Group SubParty

	Table Pictures = {}
	
	ReadOnly Var Fnt = ImageFont.Obtain("FNTSBAR") 

	Void GrabLevel(string char,Int Level, noauto)
		String n = char
		//string dat = JCR6.LoadString(sprintf("Data/LvStats/%s/%d",n,math.floor(level/100)))
		String dat = JCR6.LoadString(sPrintF("Data/CharStats/%s",n))
		Table tdat = Split(dat,"\n")
		Int lvl = -100
		For line in each(tdat)
			If line!="" 
				Table ins = split(line," ")
				Switch ins[1]
					Case "REM"
						// DO NOTHING!
					Case "LEVEL"
						lvl = lua.tonumber(ins[2])
					Default
						If prefixed(ins[1],"STAT.") 
							If lvl==level
								String st = right(ins[1],#ins[1]-5)
								RPGChar[Char].Stat["BASE_"..st] = Lua.tonumber(ins[2])
								Print("\t= "..st.." for "..Char.." is "..ins[2])
							End
						Else
							Lua.error("Unknown instruction! >> "..line)
						End
				End
			End
		End
		RPGChar[Char].Points.HP.Have = RPGChar[Char].Points.HP.Maximum
		If Char=="Jake_Human" && (!noauto)
			GrabLevel("Jake_Fairy",level,true)
		ElseIf Char=="Jake_Fairy" && (!noauto)
			GrabLevel("Jake_Human",level,true)
		End
	End
	
	Get Table TotalStat
		Static Var Ret
		If !Ret
			Ret = {}
			CSay("Creating Total Stat")
			For pref,tab in sPairs({[""]=Stats,["ZZ_ER_"]=Elements,["ZZ_SR_"]=Ailments})
				For s in Each(tab)
					Ret += Pref..s
				End
			End
		End
		Return Ret
	End
	
	Void _SetSkill(exp,lvl,int level)
		exp.Maximum = level * ({20,25,30})[__skill]
		lvl.Maximum = ({750,500,100})[__skill]
		If level>=lvl.Maximum 
			exp.Maximum = 0 
		End
		lvl.Have = level or 0
		lvl.Minimum = 0
	End
	
	Void SetSkill(string char,int i,int level)
		SetSkill(RPGChar[char].Points["EXP_Skill"..i],RPGChar[char].Points["LVL_Skill"..i],Level)
	End
	
	Void CreateCharacter(string char, int level)
		Switch Char
			Case "Jake"
				CreateCharacter("Jake_Human",level)
				CreateCharacter("Jake_Fairy",level)
				For S in Each(TotalStat)
					For Sb in Each(SubStat)
						if Sb!="BASE" && Sb!="END"
							RPGChar.Jake_Fairy.Link_Stat("Jake_Human",sb.."_"..s)
						End
					End
				End
				RPGChar.Jake_Fairy.Link_Stat("Jake_Human","Level")
				RPGChar.Jake_Fairy.Link_Stat("Jake_Human","Experience")
				RPGChar.Jake_Fairy.Link_List("Jake_Human","*")
				RPGChar.Jake_Fairy.Link_Data("Jake_Human","*")
				RPGChar.Jake_Human.Name = "Jake"
				RPGChar.Jake_Human.Name = "Jake"
				For i=1,5
					RPGChar.Jake_Human.Points["EXP_Skill"..i].Have = 0 // must exist before linking, you know
					RPGChar.Jake_Human.Points["LVL_Skill"..i].Have = 0 // must exist before linking
					RPGChar.Jake_Fairy.Link_Points("Jake_Human","EXP_Skill"..i)
					RPGChar.Jake_Fairy.Link_Points("Jake_Human","LVL_Skill"..i)
				End
				Return
			Case "Krandar"
				Lua.error("No support for Krandar yet")
			Case "Nostramantu"
				// Human!
				Lua.error("No support for Nostramantu yet")
			Case "Nostramantu_Elder"
				Lua.error("No support for Elder Nostramantu yet")
			Case "Feenalaria"
				// Human!
				Lua.error("No support for Feenalaria yet")
			Case "Feenalaria_Dress"
				RPGChar.Feenalaria_Dress = "Feenalaria"
				RPGChar.Feenalaria_Dress.Link_Stat("Feenalaria","*")
				RPGChar.Feenalaria_Dress.Link_List("Feenalaria","*")
				RPGChar.Feenalaria_Dress.Link_Data("Feenalaria","*")
				Return
			Case "Feenalaria_Fairy"
				RPGChar.Feenalaria_Fairy = "Feenalaria"
				Lua.error("No support for Feenalaria as Fairy yet")
			Default
				RPGChar.Create(char)
				RPGChar[char].Name=char
				RPGChar[char].Stat.Level = level
				RPGChar[char].Stat.Experience = EXP.ByLevel(Level+1)
				Grablevel(char,level,true) // Must be true in order to prevent conflicts between te two versions of Jake.
		End
		For S in Each(TotalStat)
			For Sb in Each(SubStat)
				If Sb!="BASE"
					RPGChar[char].Stat[sb.."_"..s] = 0
				End
			End
			String Str="SUM:"..char
			For SBS in Each(SuBStat)
				If SBS!="END"
					
					Str+="."..SBS.."_"..S
				End
			End
			RPGChar[char].StatScript["END_"..S]=Str
			//Print(S,Str,RPGChar[char].Stat["END_"..S])
		End
		For A in Each(Ailments)
			RPGChar[char].Stat["BASE_SR_"..A]= 100-math.floor(33*__skill)
		End
		RPGChar[char].Points.HP.MaxCopy  = "END_HP"
		RPGChar[char].Points.HP.Have     = RPGChar[char].Points.HP.Maximum
		RPGChar[char].Points.AP.MaxCopy  = "END_AP"
		RPGChar[char].Points.AP.Have     = RPGChar[char].Points.AP.Maximum
		RPGChar[char].Points.VIT.Maximum = ({250,100,0})[__skill]
		RPGChar[char].Points.VIT.Have    = RPGChar[char].Points.VIT.Maximum
		RPGChar[char].Data.EQUIP_Weapon  = ""
		RPGChar[char].Data.EQUIP_Armor   = ""
		RPGChar[char].Data.EQUIP_Jewel   = ""
		RPGChar[char].Data.Master        = ""
		For i=1,5
			Int val=0
			If i==1
				val=1
			End
			_SetSkill(RPGChar[char].Points["EXP_Skill"..i],RPGChar[char].Points["LVL_Skill"..i],val)
		End
		NeilUse("Script/Data/Char/"..char.."/Meta")
	End
	
	Get Int PartyCount
		If RPGParty[4]!=""
			Return 4
		End
		For i=1,3
			if RPGParty[i+1]==""
				Return i
			End
		End
		Return 0
	End
	
	Void Portrait(string ch,int X, int Y)
		Pictures[ch] = Pictures[ch] || Image.Load("GFX/BoxText/Portret/"..ch.."/General.png")
		Pictures[ch].Hot(0,Pictures[ch].H)
		Pictures[ch].Draw(X,Y)
	End


	Void Boxes()
		Static Table Boxes = { new Box(0,__BoxPosY,20,128,false),new Box(0,__BoxPosY,20,128,false),new Box(0,__BoxPosY,20,128,false),new Box(0,__BoxPosY,20,128,false)}
		Int C  = PartyCount
		Int M3 = 0
		Int W = Screen.W Div C
		Graphics.Scale(1,1)
		If C==3
			M3 = Screen.W % 3
		End
		Lua.assert(C>0,"Empty party")
		For i=1,C
			String Ch = RPGParty[i]
			Int W2 = W
			if i==3
				W2+=M3
			End
			// Background Box
			Boxes[i].X = (W*(i-1))
			Boxes[i].Y = __BoxPosY
			Boxes[i].W = W2
			Boxes[i].H = 100
			Boxes[i].Draw()
			Var B=Boxes[i]
			// Portrait
			__White
			Portrait(ch,B.X,Screen.H)
			// Bars			
			Int barx = B.X + 100
			Int barwidth = B.W-110			
			// HP
			Do
				Var HP = RPGChar[ch].Points.HP
				Number Breuk = HP.Have / HP.Maximum
				Int HPG = math.floor(255*Breuk)
				Int HPR = math.floor(255 - HPG)
				Int HBR = Math.floor(barwidth*Breuk)
				// print(HPR,HPG,0)
				Graphics.Color(50,50,50)
				Graphics.Rect(barx,B.Y+25,barwidth,10)
				Graphics.Color(HPR,HPG,0)
				Graphics.Rect(barx,B.Y+25,HBR,10)
				Fnt.DarkText("HP",barx,B.Y+35,1,1)
				Fnt.DarkText(HP.Have,barx+barwidth,B.Y+35,1,1)
			End
			// AP
			Do
				Var AP = RPGChar[ch].Points.AP
				Number Breuk = AP.Have / AP.Maximum
				Int APG = math.floor(180*Breuk)			
				Int ABB = 255
				Int ABR = Math.floor(barwidth*Breuk)
				// print(APR,APG,0)
				Graphics.Color(50,50,50)
				Graphics.Rect(barx,B.Y+50,barwidth,10)
				Graphics.Color(0,APG,ABB)
				Graphics.Rect(barx,B.Y+50,ABR,10)
				Fnt.DarkText("AP",barx,B.Y+60,1,1)
				Fnt.DarkText(AP.Have,barx+barwidth,B.Y+60,1,1)
			End
			// Vitality (if appliccable)
			If __Skill<3
				Var VIT = RPGChar[ch].Points.VIT
				Number Breuk = VIT.Have / VIT.Maximum
				Int VBR = Math.floor(barwidth*Breuk)
				// print(VITR,VITG,0)
				Graphics.Color(50,50,50)
				Graphics.Rect(barx,B.Y+75,barwidth,10)
				Graphics.Color(255,180,0)
				Graphics.Rect(barx,B.Y+75,VBR,10)
				Fnt.DarkText("VIT",barx,B.Y+85,1,1)
				Fnt.DarkText(VIT.Have,barx+barwidth,B.Y+85,1,1)
			End
			// Level (if appliccable)
		End
	End
	
End