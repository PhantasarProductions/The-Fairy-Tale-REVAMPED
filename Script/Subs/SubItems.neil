// License Information:
// src/Tricky Script/Script/Subs/SubItems.neil
// Version: 21.08.17
// Copyright (C) 2021 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
#use "Script/Data/IAA/MyData_ClassFile_IAA"
#use "Libs/Fittext"

#macro __ScrollY ScrollList[Filters]
#macro __ScrollAY ScrollList[Situation]

ReadOnly Var FilFnt = ImageFont.Obtain("FNTSBAR")
ReadOnly Var ItmFnt = Imagefont.Obtain("FNTSTATSTAT")

Table LoadedItems = {}

Global Table Inventory = {["ITM_APPLE"]=24 div gv.gInt.Skill, ["ITM_ANTIDOTE"]=6 div gv.gint.skill,["ITM_HEALINGHERB"]=3-gv.gint.skill }
Global Table Abilities = {}

Class ABLRec
	ReadOnly String iTag
	ReadOnly String Char
	Get Var Ability
		LoadedItems[itTag] = LoadedItems[itTag] || NeilUse("Script/Data/IAA/"..iTag)
		Return LoadedItems[itTag]
	End
	Bool _Unlocked
	Get Bool Unlocked
		if Abilities[Char].Skill[iTag]
			Return True
		End
		return _Unlocked
	End
	ReadOnly Int Req1
	ReadOnly Int Req2
	ReadOnly Int Req3
	ReadOnly Int Req4
	ReadOnly Int Req5
	ReadOnly String Category
	Get Bool ReqByStory
		Return Req1==0 && Req2==0 && Req3==0 && Req4==0 && Req5==0 && (!Abilities[Char].Skill[iTag])
	End
	
	Constructor(string T,string CH,int R1, int R2, int R3, int R4, int R5,string C)
		iTag = T:upper()
		Char = Ch
		Category = C
	End
	
	Static Void NewAbl(string T,string Ch,int R1, int R2, int R3, int R4, int R5,string Cat)
		T = T:upper()
		Abilities[ch] = Abilities[ch] || { ["Ability"]={}, ["Skill"]={} }
		Abilities[ch].Ability[T] = new ABLRec(T,Ch,R1,R2,R3,R4,R5,Cat)
		If ch=="Jake"
			Abilities.Jake_Human = Abilities.Jake_Human || { ["Ability"]={}, ["Skill"]={}}
			Abilities.Jake_Fairy = Abilities.Jake_Fairy || { ["Ability"]={}, ["Skill"]=Abilities.Jake_Human.Skill }
			Abilities.Jake_Human.Ability[T] = Abilities[ch].Ability[T]
			Abilities.Jake_Fairy.Ability[T] = Abilities[ch].Ability[T]
		ElseIf Prefixed(ch,"Feenalaria")
			// Feenalaria copies Jake's skills
			Static Bool FirstTime = Bool
			If FirstTime
				Abilities.Jake_Human = Abilities.Jake_Human || { ["Ability"]={}, ["Skill"]={} }
				Abilities[ch].Skill = Abilities.Jake_Human.Skill
				FirstTime = False
			End
		End
	End
	
	Static Void NewSkill(string T, string CH)
		T = T:upper()
		If Prefixed(ch,"Jake")
			Abilities.Jake_Human = Abilities.Jake_Human || { ["Ability"]={}, ["Skill"]={} }
			Abilities.Jake_Fairy = Abilities.Jake_Fairy || { ["Ability"]={}, ["Skill"]=Abilities.Jake_Human.Skill }
		Else
			Abilities[ch] = Abilities[ch] || { ["Ability"]={}, ["Skill"]={} }
		End
		// Conflict prevention
		If Abilities[ch].Skill[T]			
			Return
		End
		Abilities[ch].Skill[T] = new ABLRec(T,ch,0,0,0,0,0,"9. Skills")		
	End
	
	Void CopyHumanJake(string Ch,string LinkSkill,Force)
		If (!Abilities[ch]) || Force
			Abilities[ch] = { ["Ability"]={}, ["Skill"]=Abilities[LinkSkill].Skill }
			For k,v in pairs(Abilities.Jake_Human)
				If v.Req1>0 && v.Reg2<=0 && v.Reg3<=0 && v.Reg4<=0 && v.Reg5<=0 && v.Unlocked
					CSayF("%s copied ability %s from Jake",Ch,k)
					Abilties[ch][k] = v
				End
			End
		End
	End
	
	Void CopyMarrilona(string Ch,Force)
		Static Bool DoneAlready = False
		If (!DoneAlready) || Force
			For k,v in pairs(Abilities.Marrilona)
				CSayF("%s copied ability %s from Marrilona",Ch,k)
				Abilties[ch][k] = v
			End
		End
	End
			
End

Global Void SaveInventory()
	String Data = "Init\n"
	For k,v in sPairs(Inventory)
		Data += sPrintf("\tInventory[\"%s\"] = %4d\n",k,v)
	End
	Data += "End\n\n"
	SaveGame.Data["INVENTORY.NEIL"] = Data
End

Global Void LoadInventory()
	If SaveGame.HasData("INVENTORY.NEIL")
		NeilDoString(SaveGame.Data["INVENTORY.NEIL"])
	End
End

Global Void SetItemHas(string itTag,int num)
	Inventory[itTag:upper()] = num
End

Global Bool Allow(string itTag, string Filter)
	itTag = itTag:upper()
	Filter = Filter:upper()
	LoadedItems[itTag] = LoadedItems[itTag] || NeilUse("Script/Data/IAA/"..ItTag)
	Var MyItem = LoadedItems[itTag]
	Static String EQP="EQUIPMENT FOR "
	EQP = Replace(EQP,"HANDO STILLOR","HANDOSTILLOR")
	If Prefixed(Filter,EQP)
		String Name = Right(Filter,#Filter-#EQP)
		Return MyItem.ITM_EQPFOR:upper()==Name || MyItem["ITM_ACC_"..Name]
	End
	Switch Filter
		Case "ALL" "" "*"
			Return True
		Case "EQUIPMENT"
			Return MyItem.ITM_Type=="Weapon" || MyItem.ITM_Type=="Armor" || MyItem.ITM_Type=="Accesoiry"
		Case "CONSUMABLE" "COMBAT" "CONSUMABLES"
			Return MyItem.ITM_Type=="Consumable"
		Case "KEY" "KEYITEM" "KEY ITEM"
			Return MyItem.ITM_Type=="KeyItem"
		Case "SELLABLE"
			Return (MyItem.ITM_Sellable || MyItem.ITM_ShopPrice>0) && MyItem.ITM_Type!="KeyItem"
		Default
			Lua.error("Unknown item filter: "..Filter)
	End
End

Global Var ItemField(string ItTag,ItField)
	ItTag = ItTag:upper()
	ItField = ItField:upper()
	Switch ItField
		Case "HAS" "NUMBER" "AMOUNT"
			Return Inventory[itTag] || 0
		Default
			LoadedItems[itTag] = LoadedItems[itTag] || NeilUse("Script/Data/IAA/"..ItTag)
			//cOut("Item requested: ",ittag,"; Field: ",itfield," => ",LoadedItems[itTag][ItField])
			Return LoadedItems[itTag][ItField]
	End
End

Global Void Explain(Item)
	if (Lua.type(Item)=="string")
		// By lack of a proper overload I guess this will have to do
		LoadedItems[itTag] = LoadedItems[itTag] || NeilUse("Script/Data/IAA/"..ItTag)
		Explain(LoadedItems[itTag])
	End
	Int MX = Events.MouseX()
	Int MY = Events.MouseY()
	Graphics.Color(255,255,255)
	FitText.Dark(FilFnt,iData.Desc,MX+10,MY+100)
End

Global String OverView(int x, int y, int w, int h, string Filters,string char)
	// Basis
	Static Table ListOfFilters = { ["FIELDMENU"] = {"All","Consumables","Combat","Equipment","For <ch>","Key"}, ["COMBAT"] = {"Combat"}, ["STORE"] = {"Sellable"} }
	Static Table CurrentFilter = {}
	Static Table ScrollList = {}
	Int MX = Events.MouseX()
	Int MY = Events.MouseY()
	Bool ML = Events.MouseHitLeft()
	Lua.assert(ListOfFilters[Filters],"No filterlist for situation: "..Filters)
	CurrentFilter[Filters] = CurrentFilter[Filters] || 1
	String CF = ListOfFilters[Filters][CurrentFilter[Filters]]
	__ScrollY = __ScrollY || 0
	// Filter menu
	Int FW = w div (#ListOfFilters[Filters]+1)
	For i,fitem in iPairs(ListOfFilters[Filters])
		String CFI = fitem
		Switch Char
			Case "Jake_Human" "Jake_Fairy"
				CFI = Replace(CFI,"<ch>","Jake")
			Case "Marrilona" "Dandor" 
				CFI = Replace(CF,"<ch>",Char)
			Case "HandoStillor"
				CFI = Replace(CFI,"<ch>","Hando Stillor")
			Default
				If Suffixed(CFI,"<ch>")
					CFI=""
				End
		End
		Int TW = FilFnt.TextWidth(fitem)
		Int WH = TW div 2
		Int FX = (i * FW)+x
		if i==CurrentFilter[Filters]
			Graphics.Color(50,36,0)
			Graphics.Rect(FX-WH,y+5,TW,40)
			Graphics.Color(255,180,0)
			Graphics.Rect(FX-WH,y+5,TW,40,true)
		End
		Graphics.Color(255,180,0)
		If CF!="" && MY>Y && MY<Y+50 && MX>FX-WH && MX<FX+WH
			Graphics.Color(255,255,0)
			If ML
				CurrentFilter[Filters] = i
			End
		End
		FilFnt.DarkText(CFI,FX,y+25,2,2)
	End
	// Items
	Int iY = -__ScrollY
	//String Hover = ""
	For iTag,iNum in sPairs(Inventory)
		LoadedItems[iTag] = LoadedItems[iTag] || NeilUse("Script/Data/IAA/"..iTag)
		Var iData = LoadedItems[iTag]
		
		If iY>=0 && iY<=H-150 && iNum>0 && Allow(iTag,ListOfFilters[Filters][CurrentFilter[Filters]])
			Int MDX = 0
			Int DX = X+10
			Int DY = Y+iY+100
			bool Hovering = False
			If MX>DX && MX<(X+W)-80 && MY>DY && MY<DY+35
				MDX = 30
				Hovering = True
				//Hover = iTag
				If ML
					Return iTag
				End
			End
			Graphics.Color(255,255,255)
			ItmFnt.Text(iData.Title,DX+MDX,DY)
			Graphics.Color(255,180,  0)
			ItmFnt.Text(Lua.tostring(iNum),(X+W)-(80+MDX),DY,1)
			iY+=40
			If Hovering
				Explain(iData)
			End
		End
	End
	Return ""
End

Void Categorize(String Char)
	If !Abilities[char].Cat
		Abilities[char].Cat = {}
		Table Q = {["9. Skills"]=true}
		For A in pairs(Abilities[char].Ability)
			Q[A.Category] = true
		End
		For C,_in sPairs(Q)
			Abilities[char].Cat += C
		End
	End
End
		
Void QuickWork(Table AT,String Char)
	For Category,Lijst in Pairs(AT)
		For AbTag,Req in Pairs(Lijst)
			AblRec.NewAbl(AbTag,Char,Req[1],Req[2],Req[3],Req[4],Req[5],Category)
		End
	End
End

Void LoadAbilityList(String Char,Force)
	If (!Abilities[char]) || Force
		NeilUse("Script/Data/Char/"..char.."/Abilities.neil")
	End
	If Char=="Jake_Human"
		LoadAbilityList("Jake_Fairy",true)		
	End
	Categorize(Char)
End

Global Void AblOverview(String Char,int x, int y, int w, int h,string situation)
	Global Table ScrollList = {}
	global Table CurrentCat = {}
	CurrentCat[char] = CurrentCat[char] || 1
	__ScrollAY = __ScrollAY || 0
	Int cw = w div (#Abilities[Char].Cat+1)
	String ctn = Abilities[Char].Cat[CurrentCat[Char]]	
	For i,ct in ipairs(Abilities[Char].Cat)
		Int CX = i*cw 
		Graphics.Color(255,180,0)
		FilFnt.DarkText(ct,CX,y+25,2,2)
	End
End