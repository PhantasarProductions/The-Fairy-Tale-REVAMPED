// License Information:
// src/Tricky Script/Script/Subs/SubItems.neil
// Version: 21.08.15
// Copyright (C) 2021 Jeroen Petrus Broks
// 
// ===========================
// This file is part of a project related to the Phantasar Chronicles or another
// series or saga which is property of Jeroen P. Broks.
// This means that it may contain references to a story-line plus characters
// which are property of Jeroen Broks. These references may only be distributed
// along with an unmodified version of the game.
// 
// As soon as you remove or replace ALL references to the storyline or character
// references, or any termology specifically set up for the Phantasar universe,
// or any other univers a story of Jeroen P. Broks is set up for,
// the restrictions of this file are removed and will automatically become
// zLib licensed (see below).
// 
// Please note that doing so counts as a modification and must be marked as such
// in accordance to the zLib license.
// ===========================
// zLib license terms:
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
#use "Script/Data/IAA/MyData_ClassFile_IAA"

#macro __ScrollY ScrollList[Filters]

ReadOnly Var FilFnt = ImageFont.Obtain("FNTSBAR")

Table LoadedItems = {}

Global Table Inventory = {["ITM_APPLE"]=24 div gv.gInt.Skill, ["ITM_ANTIDOTE"]=6 div gv.gint.skill,["ITM_HEALINGHEBRB"]=3-gv.gint.skill }

Global Void SaveInventory()
	String Data = "Init\n"
	For k,v in sPairs(Inventory)
		Data += sPrintf("\tInventory[\"%s\"] = %4d\n",k,v)
	End
	Data += "End\n\n"
	SaveGame.Data["INVENTORY.NEIL"] = Data
End

Global Void LoadInventory()
	If SaveGame.HasData("INVENTORY.NEIL")
		NeilDoString(SaveGame.Data["INVENTORY.NEIL"])
	End
End

Global Void SetItemHas(string itTag,int num)
	Inventory[itTag:upper()] = num
End

Global Bool Allow(string itTag, string Filter)
	itTag = itTag:upper()
	Filter = Filter:upper()
	LoadedItems[itTag] = LoadedItems[itTag] || NeilUse("Script/Data/IAA/"..ItTag)
	Var MyItem = LoadedItems[itTag]
	Static String EQP="EQUIPMENT FOR "
	EQP = Replace(EQP,"HANDO STILLOR","HANDOSTILLOR")
	If Prefixed(Filter,EQP)
		String Name = Right(Filter,#Filter-#EQP)
		Return MyItem.ITM_EQPFOR:upper()==Name || MyItem["ITM_ACC_"..Name]
	End
	Switch Filter
		Case "ALL" "" "*"
			Return True
		Case "EQUIPMENT"
			Return MyItem.ITM_Type=="Weapon" || MyItem.ITM_Type=="Armor" || MyItem.ITM_Type=="Accesoiry"
		Case "CONSUMABLE" "COMBAT"
			Return MyItem.ITM_Type=="Consumable"
		Case "KEY" "KEYITEM" "KEY ITEM"
			Return MyItem.ITM_Type=="KeyItem"
		Case "SELLABLE"
			Return (MyItem.ITM_Sellable || MyItem.ITM_ShopPrice>0) && MyItem.ITM_Type!="KeyItem"
		Default
			Lua.error("Unknown item filter: "..Filter)
	End
End

Global Var ItemField(string ItTag,ItField)
	ItTag = ItTag:upper()
	ItField = ItField:upper()
	Switch ItField
		Case "HAS" "NUMBER" "AMOUNT"
			Return Inventory[itTag] || 0
		Default
			LoadedItems[itTag] = LoadedItems[itTag] || NeilUse("Script/Data/IAA/"..ItTag)
			//cOut("Item requested: ",ittag,"; Field: ",itfield," => ",LoadedItems[itTag][ItField])
			Return LoadedItems[itTag][ItField]
	End
End

Global String OverView(int x, int y, int w, int h, string Filters,string char)
	Static Table ListOfFilters = { ["FIELDMENU"] = {"All","Consumables","Combat","Equipment","For <ch>","Key"}, ["COMBAT"] = {"Combat"}, ["STORE"] = {"Sellable"} }
	Static Table CurrentFilter = {}
	Static Table ScrollList = {}
	Int MX = Events.MouseX()
	Int MY = Events.MouseY()
	Bool ML = Events.MouseHitLeft()
	Lua.assert(ListOfFilters[Filters],"No filterlist for situation: "..Filters)
	CurrentFilter[Filters] = CurrentFilter[Filters] || 1
	String CF = ListOfFilters[Filters][CurrentFilter[Filters]]
	__ScrollY = __ScrollY || 0
	//Switch Char
	//	Case "Jake_Human" "Jake_Fairy"
	//		CF = Replace(CF,"<ch>","Jake")
	//	case "Marrilona" "Dandor" 
	//		CF = Replace(CF,"<ch>",Char)
	//	Case "HandoStillor"
	//		CF = Replace(CF,"<ch>","Hando Stillor")
	//	Default
	//		If Suffixed(CF,"<ch>")
	//			CF=""
	//		End
	//End
	Int FW = w div (#ListOfFilters[Filters]+1)
	For i,fitem in iPairs(ListOfFilters[Filters])
		String CFI = fitem
		Switch Char
			Case "Jake_Human" "Jake_Fairy"
				CFI = Replace(CFI,"<ch>","Jake")
			Case "Marrilona" "Dandor" 
				CFI = Replace(CF,"<ch>",Char)
			Case "HandoStillor"
				CFI = Replace(CFI,"<ch>","Hando Stillor")
			Default
				If Suffixed(CFI,"<ch>")
					CFI=""
				End
		End
		Int TW = FilFnt.TextWidth(fitem)
		Int WH = TW div 2
		Int FX = (i * FW)+x
		if i==CurrentFilter[Filters]
			Graphics.Color(50,36,0)
			Graphics.Rect(FX-WH,y+5,TW,40)
			Graphics.Color(255,180,0)
			Graphics.Rect(FX-WH,y+5,TW,40,true)
		End
		Graphics.Color(255,180,0)
		If CF!="" && MY>Y && MY<Y+50 && MX>FX-WH && MX<FX+WH
			Graphics.Color(255,255,0)
			If ML
				CurrentFilter[Filters] = i
			End
		End
		FilFnt.DarkText(CFI,FX,y+25,2,2)
	End
	Return ""
End