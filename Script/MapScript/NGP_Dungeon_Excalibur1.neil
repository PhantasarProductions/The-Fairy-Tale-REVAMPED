// License Information:
// **********************************************
// 
// src/Tricky Script/Script/MapScript/NGP_Dungeon_Excalibur1.neil
// (c) Jeroen Broks, 2022, All Rights Reserved.
// 
// This file contains material that is related
// to a storyline that is which is strictly
// copyrighted to Jeroen Broks.
// 
// This file may only be used in an unmodified
// form with an unmodified version of the
// software this file belongs to.
// 
// You may use this file for your study to see
// how I solved certain things in the creation
// of this project to see if you find valuable
// leads for the creation of your own.
// 
// Mostly this file comes along with a project
// that is for most part released under an
// open source license and that means that if
// you use that code with this file removed
// from it, you can use it under that license.
// Please check out the other files to find out
// which license applies.
// This file comes 'as-is' and in no possible
// way the author can be held responsible of
// any form of damages that may occur due to
// the usage of this file
// 
// 
// **********************************************
// 
// version: 22.03.05
// End License Information

#use "Script/Use/Anyway"

QuickMeta KeyCard
	Index
		Static Var Colors = {"Red","Gold","Green","Blue"}
		Static Var SetCol = {["RED"]={255,0,0},["GOLD"]={255,180,0},["GREEN"]={0,255,0},["BLUE"]={0,0,255}}
		Switch key:upper()
			Case "COLORS" 
				Return Colors
			Case "SETRED" "SETGREEN" "SETGOLD" "SETBLUE"
				Var C=SetCol[Right(Key,#Key-3):upper()]
				Graphics.Color(C[1],C[2],C[3])
				Return NIKS
			Case "RED" "GOLD" "GREEN" "BLUE"
				Return gv.gbool[sprintf("Excalibur_%s_%s",Map.Layer,Key)]
			Default
				Lua.error("R:Unknown key for KeyCard: "..key)
		End
	End
	NewIndex
		Switch key:upper()
			Case "COLORS" "SETRED" "SETGREEN" "SETGOLD" "SETBLUE"
				Lua.error(sprintf("KeyCard.%s is read-only!",key))
			Case "RED" "GOLD" "GREEN" "BLUE"
				gv.gbool[sprintf("Excalibur_%s_%s",Map.Layer,Key)] = (value!=nil && value!=false)
			Default
				Lua.error("W:Unknown key for KeyCard: "..key)
		End
	End
End

Class TDoors
	Static Var DTabel
	Static Var GetByLayer()
		DTabel = DTabel || {}
		DTabel[Map.Layer] = DTabel[Map.Layer] || {}
		For k in Each(KeyCard.Colors)
			CSayF("Is there a %s door?",k)
			If Map.HasTag((k:upper()).."_LINKS")
				CSay("=> Yes!")
				DTabel[Map.Layer] = DTabel[Map.Layer] || {}
				DTabel[Map.Layer][k:upper()] = Self(k)
			Else 
				CSay("=> Nope! Skipping!")
			End
		End
		Return DTabel[Map.Layer]		
	End
	
	Static Void UpdateAll()
		For _,d in Pairs(DTabel[Map.Layer])
			d.Update()
		End
	End
	
	Static Void Open(string c)
		If DTabel[Map.Layer]
			If DTabel[Map.Layer][c:upper()]
				DTabel[Map.Layer][c:upper()].Opened=True
			Else
				CSayF("WARNING! Request to open the %s door, but no data about that door exists!",c) 
			End
		Else
			CSayF("No door data for layer %s",Map.Layer)
		End
	End
		
	
	ReadOnly Int SLX
	ReadOnly Int SLY
	ReadOnly Int SRX
	ReadOnly Int SRY
	ReadOnly String Col
	Get String UC
		Return Col:upper()
	End
	
	Int Slide = 0
	Get Int LX
		Return SLX-Slide
	End
	Get Int LY
		Return SLY
	End
	Get Int RX
		Return SRX+Slide
	End
	Get Int RY
		Return SRY
	End
	Bool Opened=False
	
	Void Update()
		If Opened && Slide<30
			Slide++
			If Slide>25
				Map.SetObj(uc.."_LINKS","Impassible",False)
				Map.ShowByLabel("K_"..uc)
				Map.Remap()
			End
			Map.SetObj(uc.."_LINKS", "X",LX)
			Map.SetObj(uc.."_LINKS", "Y",LY)
			Map.SetObj(uc.."_RECHTS","X",RX)
			Map.SetObj(uc.."_RECHTS","Y",RY)
		End		
	End
	
	Constructor (string c)
		Col = C
		SLX = Map.GetObjInt(uc.."_LINKS", "X")
		SLY = Map.GetObjInt(uc.."_LINKS", "Y")
		SRX = Map.GetObjInt(uc.."_RECHTS","X")
		SRY = Map.GetObjInt(uc.."_RECHTS","Y")	
		Map.HideByLabel("K_"..uc)
		CSayF("%s door initiated",c)
	End
End

Group MScript

	ReadOnly Bool HasDraw   = True
	ReadOnly Bool HasUpdate = True
	
	ReadOnly Var Yeah = Audio.LoadNew("Audio/Alg/Yeah.ogg","EXCALIBUR_YEAH")
	ReadOnly Delegate PreDraw = NIKS
	
	Void PostDraw()
		Static Var Card = Image.LoadNew("GFX/Textures/Excalibur/EXCALIBUR/KEYCARD.PNG","EXCALIBUR_CARD")
		Static Int CW = (Card.W + 5)*#KeyCard.Colors
		Static Int CS = (Screen.W div 2) - (CW div 2)
		For i,k in pairs(KeyCard.Colors)
			int x = CS+(i*(Card.W + 5))
			int y = 5
			//CsayF("Card %d: %s  (%04d,%04d)",i,k,x,y)
			Graphics.Color(100,100,100)
			Graphics.Alpha(255)
			Graphics.Scale(1,1)
			if KeyCard[k]
				KeyCard["Set"..k]()
			End
			Card.Draw(x,y)
		End
		__white
	End
	
	Void Update()
		Static Var Doors
		Doors = Doors || {}
		Doors[Map.Layer] = Doors[Map.Layer] || TDoors.GetByLayer()
		TDoors.UpdateAll()
	End
	
	Void BeginDungeon()
		MapText("WELCOME")
	End
	
	// Neutralize Crystal's ammunition reloading points.
	ReadOnly Delegate NPC_AMMO = NIKS
	
	Void ToDungeon()
		Map.GoToLayer("#001","BeginMetNummer1")
	End
	
	Void TerugNaarHangar()
		Map.GoToLayer("#000","From001")
	End
	
	#region Keys
	Delegate NPC_Red
	Delegate NPC_Gold
	Delegate NPC_Green
	Delegate NPC_Blue
	Void Key(string k)
		static var yeah = Audio.LoadNew("audio/alg/yeah.ogg","EXCALIBUR_YEAH")
		yeah.Play()
		If __skill<3
			For i=1,4
				RPGChar[RPGParty[i]].Stat.Experience -= math.random(30 div 2,1500 div 2)
			End
		End
		KeyCard[k]=true
		Map.Kill("NPC_"..(k:upper()),true)
	End
	
	Void Open(string k)
		CSayF("MapScript.Open('%s')",k)
		TDoors.Open(k)
		Map.Kill("OPEN_"..(k:upper()),false)
	End
	#endregion
	
	#region The Transporter
	Get Bool AllowTrans
		return !gv.gbool.ExcaliburTransporterBlocked
	End
	Set Bool AllowTrans
		gv.gbool.ExcaliburTransporterBlocked = !Value
	End
	
	Void LeaveTransporter()
		AllowTrans = True
	End
	
	Void Transporter()
		If AllowTrans
			Static Bool First
			If !First
				Loading()
				State.Load("FLOW_TRANSPORTER","Script/Flow/Mini/ExTrans.neil")
				First=True
			End
			Flow.Current="TRANSPORTER"
			AllowTrans=False
		End
	End		
	#endregion
	
	Constructor
		ZA.TabEnter{"ToDungeon","TerugNaarHangar","Transporter"}
		ZA.Leave("Transporter","LeaveTransporter")
		For k in Each{"Red","Gold","Green","Blue"}
			string uk=k:upper()
			Self["NPC_"..k]=Lua.load("Neil.Globals.MScript.Key('"..k.."')")
			ZA.Enter("OPEN_"..uk,"Open",k)
		End
	End
End